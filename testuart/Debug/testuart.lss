
testuart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000650  000006e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000650  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800104  00800104  000006e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000718  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000133e  00000000  00000000  00000848  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a52  00000000  00000000  00001b86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009fd  00000000  00000000  000025d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  00002fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000618  00000000  00000000  00003240  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bd8  00000000  00000000  00003858  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00004430  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e5       	ldi	r30, 0x50	; 80
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 30       	cpi	r26, 0x09	; 9
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	b2 d1       	rcall	.+868    	; 0x428 <main>
  c4:	c3 c2       	rjmp	.+1414   	; 0x64c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
		return UDR1;
	}
}
  c8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
  cc:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
  d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
  d4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
  d8:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
  dc:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
  e0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
  e4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 10e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 112:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 116:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 11a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 11e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 122:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 126:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 148:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 14c:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 150:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 15e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 162:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 166:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <TimerFlag>
 178:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 17c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 180:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 184:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 188:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 18c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 190:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 194:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <initUSART>:
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	81 f0       	breq	.+32     	; 0x1ce <initUSART+0x24>
 1ae:	e1 ec       	ldi	r30, 0xC1	; 193
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	88 61       	ori	r24, 0x18	; 24
 1b6:	80 83       	st	Z, r24
 1b8:	e2 ec       	ldi	r30, 0xC2	; 194
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	86 60       	ori	r24, 0x06	; 6
 1c0:	80 83       	st	Z, r24
 1c2:	83 e3       	ldi	r24, 0x33	; 51
 1c4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 1c8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1cc:	08 95       	ret
 1ce:	e9 ec       	ldi	r30, 0xC9	; 201
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	88 61       	ori	r24, 0x18	; 24
 1d6:	80 83       	st	Z, r24
 1d8:	ea ec       	ldi	r30, 0xCA	; 202
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	86 60       	ori	r24, 0x06	; 6
 1e0:	80 83       	st	Z, r24
 1e2:	83 e3       	ldi	r24, 0x33	; 51
 1e4:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 1e8:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 1ec:	08 95       	ret

000001ee <USART_Send>:
 1ee:	61 30       	cpi	r22, 0x01	; 1
 1f0:	41 f0       	breq	.+16     	; 0x202 <USART_Send+0x14>
 1f2:	e0 ec       	ldi	r30, 0xC0	; 192
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	90 81       	ld	r25, Z
 1f8:	95 ff       	sbrs	r25, 5
 1fa:	fd cf       	rjmp	.-6      	; 0x1f6 <USART_Send+0x8>
 1fc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 200:	08 95       	ret
 202:	e8 ec       	ldi	r30, 0xC8	; 200
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	90 81       	ld	r25, Z
 208:	95 ff       	sbrs	r25, 5
 20a:	fd cf       	rjmp	.-6      	; 0x206 <USART_Send+0x18>
 20c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 210:	08 95       	ret

00000212 <initHC_SR04>:
	Trigger Pin A0 -> OUTPUT
	Echo Pin A1 -> INPUT
	0 0 0 0 0 0 E T
	x x x x x x 0 1 : DDRx
	*/
	DDRA = 0x55; PORTA = 0xAA;
 212:	85 e5       	ldi	r24, 0x55	; 85
 214:	81 b9       	out	0x01, r24	; 1
 216:	8a ea       	ldi	r24, 0xAA	; 170
 218:	82 b9       	out	0x02, r24	; 2
 21a:	08 95       	ret

0000021c <readHC_SR04>:
}


double readHC_SR04(unsigned char m_trig, unsigned char m_echo) {
 21c:	cf 93       	push	r28
	double duration = 0;
	
	PORTA = SetBit(PORTA, m_trig, 0);
 21e:	92 b1       	in	r25, 0x02	; 2
//Functionality - Sets bit on a PORTx
//Parameter: Takes in a uChar for a PORTx, the pin number and the binary value 
//Returns: The new value of the PORTx
unsigned char SetBit(unsigned char pin, unsigned char number, unsigned char bin_value) 
{
	return (bin_value ? pin | (0x01 << number) : pin & ~(0x01 << number));
 220:	21 e0       	ldi	r18, 0x01	; 1
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	a9 01       	movw	r20, r18
 226:	02 c0       	rjmp	.+4      	; 0x22c <readHC_SR04+0x10>
 228:	44 0f       	add	r20, r20
 22a:	55 1f       	adc	r21, r21
 22c:	8a 95       	dec	r24
 22e:	e2 f7       	brpl	.-8      	; 0x228 <readHC_SR04+0xc>
 230:	84 2f       	mov	r24, r20
 232:	80 95       	com	r24
 234:	98 23       	and	r25, r24
 236:	92 b9       	out	0x02, r25	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 238:	95 e0       	ldi	r25, 0x05	; 5
 23a:	9a 95       	dec	r25
 23c:	f1 f7       	brne	.-4      	; 0x23a <readHC_SR04+0x1e>
 23e:	00 00       	nop
	_delay_us(2);

	// 10 microseconds high
	PORTA = SetBit(PORTA, m_trig, 1);
 240:	92 b1       	in	r25, 0x02	; 2
 242:	49 2b       	or	r20, r25
 244:	42 b9       	out	0x02, r20	; 2
 246:	9a e1       	ldi	r25, 0x1A	; 26
 248:	9a 95       	dec	r25
 24a:	f1 f7       	brne	.-4      	; 0x248 <readHC_SR04+0x2c>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <readHC_SR04+0x32>
	_delay_us(10);
	PORTA = SetBit(PORTA, m_trig, 0);
 24e:	92 b1       	in	r25, 0x02	; 2
 250:	89 23       	and	r24, r25
 252:	82 b9       	out	0x02, r24	; 2
//Functionality - Gets bit from a PINx
//Parameter: Takes in a uChar for a PINx and the pin number
//Returns: The value of the PINx
unsigned char GetBit(unsigned char port, unsigned char number) 
{
	return ( port & (0x01 << number) );
 254:	02 c0       	rjmp	.+4      	; 0x25a <readHC_SR04+0x3e>
 256:	22 0f       	add	r18, r18
 258:	33 1f       	adc	r19, r19
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <readHC_SR04+0x3a>
 25e:	c2 2f       	mov	r28, r18
	
	while (!GetBit(PINA, m_echo)) {}
 260:	80 b1       	in	r24, 0x00	; 0
 262:	8c 23       	and	r24, r28
 264:	e9 f3       	breq	.-6      	; 0x260 <readHC_SR04+0x44>
		
	while (GetBit(PINA, m_echo)) {duration++;}
 266:	80 b1       	in	r24, 0x00	; 0
 268:	28 23       	and	r18, r24
 26a:	61 f0       	breq	.+24     	; 0x284 <readHC_SR04+0x68>
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	cb 01       	movw	r24, r22
 272:	20 e0       	ldi	r18, 0x00	; 0
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	40 e8       	ldi	r20, 0x80	; 128
 278:	5f e3       	ldi	r21, 0x3F	; 63
 27a:	07 d1       	rcall	.+526    	; 0x48a <__addsf3>
 27c:	20 b1       	in	r18, 0x00	; 0
 27e:	2c 23       	and	r18, r28
 280:	c1 f7       	brne	.-16     	; 0x272 <readHC_SR04+0x56>
 282:	03 c0       	rjmp	.+6      	; 0x28a <readHC_SR04+0x6e>
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	70 e0       	ldi	r23, 0x00	; 0
 288:	cb 01       	movw	r24, r22
	
	double distance = duration * 0.034/2.0;
	
	return duration;
}
 28a:	cf 91       	pop	r28
 28c:	08 95       	ret

0000028e <map>:
#include "bit.h"

// xxxx   xx  xx
// column led color
unsigned char map(double x, double y, double z, unsigned char u_color) {
 28e:	4f 92       	push	r4
 290:	5f 92       	push	r5
 292:	6f 92       	push	r6
 294:	7f 92       	push	r7
 296:	8f 92       	push	r8
 298:	9f 92       	push	r9
 29a:	af 92       	push	r10
 29c:	bf 92       	push	r11
 29e:	cf 92       	push	r12
 2a0:	ef 92       	push	r14
 2a2:	ff 92       	push	r15
 2a4:	0f 93       	push	r16
 2a6:	1f 93       	push	r17
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	00 d0       	rcall	.+0      	; 0x2ae <map+0x20>
 2ae:	00 d0       	rcall	.+0      	; 0x2b0 <map+0x22>
 2b0:	00 d0       	rcall	.+0      	; 0x2b2 <map+0x24>
 2b2:	cd b7       	in	r28, 0x3d	; 61
 2b4:	de b7       	in	r29, 0x3e	; 62
 2b6:	4b 01       	movw	r8, r22
 2b8:	5c 01       	movw	r10, r24
 2ba:	29 83       	std	Y+1, r18	; 0x01
 2bc:	3a 83       	std	Y+2, r19	; 0x02
 2be:	4b 83       	std	Y+3, r20	; 0x03
 2c0:	5c 83       	std	Y+4, r21	; 0x04
 2c2:	27 01       	movw	r4, r14
 2c4:	38 01       	movw	r6, r16
//Functionality - Sets bit on a PORTx
//Parameter: Takes in a uChar for a PORTx, the pin number and the binary value 
//Returns: The new value of the PORTx
unsigned char SetBit(unsigned char pin, unsigned char number, unsigned char bin_value) 
{
	return (bin_value ? pin | (0x01 << number) : pin & ~(0x01 << number));
 2c6:	8c 2d       	mov	r24, r12
 2c8:	81 70       	andi	r24, 0x01	; 1
 2ca:	8d 83       	std	Y+5, r24	; 0x05
 2cc:	c1 fe       	sbrs	r12, 1
 2ce:	03 c0       	rjmp	.+6      	; 0x2d6 <map+0x48>
 2d0:	82 60       	ori	r24, 0x02	; 2
 2d2:	8d 83       	std	Y+5, r24	; 0x05
 2d4:	03 c0       	rjmp	.+6      	; 0x2dc <map+0x4e>
 2d6:	9d 81       	ldd	r25, Y+5	; 0x05
 2d8:	9d 7f       	andi	r25, 0xFD	; 253
 2da:	9d 83       	std	Y+5, r25	; 0x05
	val = SetBit(val, 1, GetBit(color, 1));
	
	// Determine which column (0-3)
	unsigned char column = 0x00;
	
	if (x >= 36) {
 2dc:	20 e0       	ldi	r18, 0x00	; 0
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	40 e1       	ldi	r20, 0x10	; 16
 2e2:	52 e4       	ldi	r21, 0x42	; 66
 2e4:	c5 01       	movw	r24, r10
 2e6:	b4 01       	movw	r22, r8
 2e8:	ad d1       	rcall	.+858    	; 0x644 <__gesf2>
 2ea:	88 23       	and	r24, r24
 2ec:	9c f0       	brlt	.+38     	; 0x314 <map+0x86>
		if (y >= 36) {
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	8e 83       	std	Y+6, r24	; 0x06
 2f2:	20 e0       	ldi	r18, 0x00	; 0
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	40 e1       	ldi	r20, 0x10	; 16
 2f8:	52 e4       	ldi	r21, 0x42	; 66
 2fa:	69 81       	ldd	r22, Y+1	; 0x01
 2fc:	7a 81       	ldd	r23, Y+2	; 0x02
 2fe:	8b 81       	ldd	r24, Y+3	; 0x03
 300:	9c 81       	ldd	r25, Y+4	; 0x04
 302:	a0 d1       	rcall	.+832    	; 0x644 <__gesf2>
 304:	88 23       	and	r24, r24
 306:	0c f4       	brge	.+2      	; 0x30a <map+0x7c>
 308:	1e 82       	std	Y+6, r1	; 0x06
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	9e 81       	ldd	r25, Y+6	; 0x06
 30e:	89 27       	eor	r24, r25
 310:	c1 f4       	brne	.+48     	; 0x342 <map+0xb4>
 312:	1b c0       	rjmp	.+54     	; 0x34a <map+0xbc>
			column = 0;
		} else {
			column = 1;
		}
	} else if (x < 36) {
 314:	20 e0       	ldi	r18, 0x00	; 0
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	40 e1       	ldi	r20, 0x10	; 16
 31a:	52 e4       	ldi	r21, 0x42	; 66
 31c:	c5 01       	movw	r24, r10
 31e:	b4 01       	movw	r22, r8
 320:	18 d1       	rcall	.+560    	; 0x552 <__cmpsf2>
 322:	88 23       	and	r24, r24
 324:	0c f0       	brlt	.+2      	; 0x328 <map+0x9a>
 326:	66 c0       	rjmp	.+204    	; 0x3f4 <map+0x166>
		if (y >= 36) {
 328:	20 e0       	ldi	r18, 0x00	; 0
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	40 e1       	ldi	r20, 0x10	; 16
 32e:	52 e4       	ldi	r21, 0x42	; 66
 330:	69 81       	ldd	r22, Y+1	; 0x01
 332:	7a 81       	ldd	r23, Y+2	; 0x02
 334:	8b 81       	ldd	r24, Y+3	; 0x03
 336:	9c 81       	ldd	r25, Y+4	; 0x04
 338:	85 d1       	rcall	.+778    	; 0x644 <__gesf2>
 33a:	88 23       	and	r24, r24
 33c:	0c f4       	brge	.+2      	; 0x340 <map+0xb2>
 33e:	5c c0       	rjmp	.+184    	; 0x3f8 <map+0x16a>
//Functionality - Gets bit from a PINx
//Parameter: Takes in a uChar for a PINx and the pin number
//Returns: The value of the PINx
unsigned char GetBit(unsigned char port, unsigned char number) 
{
	return ( port & (0x01 << number) );
 340:	83 e0       	ldi	r24, 0x03	; 3
//Functionality - Sets bit on a PORTx
//Parameter: Takes in a uChar for a PORTx, the pin number and the binary value 
//Returns: The new value of the PORTx
unsigned char SetBit(unsigned char pin, unsigned char number, unsigned char bin_value) 
{
	return (bin_value ? pin | (0x01 << number) : pin & ~(0x01 << number));
 342:	9d 81       	ldd	r25, Y+5	; 0x05
 344:	90 61       	ori	r25, 0x10	; 16
 346:	99 83       	std	Y+1, r25	; 0x01
 348:	03 c0       	rjmp	.+6      	; 0x350 <map+0xc2>
 34a:	9d 81       	ldd	r25, Y+5	; 0x05
 34c:	9f 7e       	andi	r25, 0xEF	; 239
 34e:	99 83       	std	Y+1, r25	; 0x01
 350:	81 ff       	sbrs	r24, 1
 352:	04 c0       	rjmp	.+8      	; 0x35c <map+0xce>
 354:	89 81       	ldd	r24, Y+1	; 0x01
 356:	80 62       	ori	r24, 0x20	; 32
 358:	89 83       	std	Y+1, r24	; 0x01
 35a:	03 c0       	rjmp	.+6      	; 0x362 <map+0xd4>
 35c:	99 81       	ldd	r25, Y+1	; 0x01
 35e:	9f 7d       	andi	r25, 0xDF	; 223
 360:	99 83       	std	Y+1, r25	; 0x01
	// 60 - 12
	unsigned char currLED = 0x00;
	if (z >= 48)
		currLED = 0;
		
	if (z < 48 && z >= 36)
 362:	20 e0       	ldi	r18, 0x00	; 0
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	40 e4       	ldi	r20, 0x40	; 64
 368:	52 e4       	ldi	r21, 0x42	; 66
 36a:	c3 01       	movw	r24, r6
 36c:	b2 01       	movw	r22, r4
 36e:	f1 d0       	rcall	.+482    	; 0x552 <__cmpsf2>
 370:	88 23       	and	r24, r24
 372:	6c f4       	brge	.+26     	; 0x38e <map+0x100>
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	8d 83       	std	Y+5, r24	; 0x05
 378:	20 e0       	ldi	r18, 0x00	; 0
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	40 e1       	ldi	r20, 0x10	; 16
 37e:	52 e4       	ldi	r21, 0x42	; 66
 380:	c3 01       	movw	r24, r6
 382:	b2 01       	movw	r22, r4
 384:	5f d1       	rcall	.+702    	; 0x644 <__gesf2>
 386:	88 23       	and	r24, r24
 388:	1c f4       	brge	.+6      	; 0x390 <map+0x102>
 38a:	1d 82       	std	Y+5, r1	; 0x05
 38c:	01 c0       	rjmp	.+2      	; 0x390 <map+0x102>
 38e:	1d 82       	std	Y+5, r1	; 0x05
		currLED = 1;
		
	if (z < 36 && z >= 24)
 390:	20 e0       	ldi	r18, 0x00	; 0
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	40 e1       	ldi	r20, 0x10	; 16
 396:	52 e4       	ldi	r21, 0x42	; 66
 398:	c3 01       	movw	r24, r6
 39a:	b2 01       	movw	r22, r4
 39c:	da d0       	rcall	.+436    	; 0x552 <__cmpsf2>
 39e:	88 23       	and	r24, r24
 3a0:	5c f4       	brge	.+22     	; 0x3b8 <map+0x12a>
 3a2:	20 e0       	ldi	r18, 0x00	; 0
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	40 ec       	ldi	r20, 0xC0	; 192
 3a8:	51 e4       	ldi	r21, 0x41	; 65
 3aa:	c3 01       	movw	r24, r6
 3ac:	b2 01       	movw	r22, r4
 3ae:	4a d1       	rcall	.+660    	; 0x644 <__gesf2>
 3b0:	88 23       	and	r24, r24
 3b2:	14 f0       	brlt	.+4      	; 0x3b8 <map+0x12a>
 3b4:	92 e0       	ldi	r25, 0x02	; 2
		currLED = 2;
 3b6:	9d 83       	std	Y+5, r25	; 0x05
		
	if (z < 24)
 3b8:	20 e0       	ldi	r18, 0x00	; 0
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	40 ec       	ldi	r20, 0xC0	; 192
 3be:	51 e4       	ldi	r21, 0x41	; 65
 3c0:	c3 01       	movw	r24, r6
 3c2:	b2 01       	movw	r22, r4
 3c4:	c6 d0       	rcall	.+396    	; 0x552 <__cmpsf2>
 3c6:	88 23       	and	r24, r24
 3c8:	2c f0       	brlt	.+10     	; 0x3d4 <map+0x146>
 3ca:	8d 81       	ldd	r24, Y+5	; 0x05
//Functionality - Gets bit from a PINx
//Parameter: Takes in a uChar for a PINx and the pin number
//Returns: The value of the PINx
unsigned char GetBit(unsigned char port, unsigned char number) 
{
	return ( port & (0x01 << number) );
 3cc:	98 2f       	mov	r25, r24
//Functionality - Sets bit on a PORTx
//Parameter: Takes in a uChar for a PORTx, the pin number and the binary value 
//Returns: The new value of the PORTx
unsigned char SetBit(unsigned char pin, unsigned char number, unsigned char bin_value) 
{
	return (bin_value ? pin | (0x01 << number) : pin & ~(0x01 << number));
 3ce:	92 70       	andi	r25, 0x02	; 2
 3d0:	31 f0       	breq	.+12     	; 0x3de <map+0x150>
 3d2:	01 c0       	rjmp	.+2      	; 0x3d6 <map+0x148>
 3d4:	83 e0       	ldi	r24, 0x03	; 3
//Functionality - Gets bit from a PINx
//Parameter: Takes in a uChar for a PINx and the pin number
//Returns: The value of the PINx
unsigned char GetBit(unsigned char port, unsigned char number) 
{
	return ( port & (0x01 << number) );
 3d6:	99 81       	ldd	r25, Y+1	; 0x01
//Functionality - Sets bit on a PORTx
//Parameter: Takes in a uChar for a PORTx, the pin number and the binary value 
//Returns: The new value of the PORTx
unsigned char SetBit(unsigned char pin, unsigned char number, unsigned char bin_value) 
{
	return (bin_value ? pin | (0x01 << number) : pin & ~(0x01 << number));
 3d8:	98 60       	ori	r25, 0x08	; 8
 3da:	99 83       	std	Y+1, r25	; 0x01
 3dc:	03 c0       	rjmp	.+6      	; 0x3e4 <map+0x156>
 3de:	99 81       	ldd	r25, Y+1	; 0x01
 3e0:	97 7f       	andi	r25, 0xF7	; 247
 3e2:	99 83       	std	Y+1, r25	; 0x01
 3e4:	80 ff       	sbrs	r24, 0
 3e6:	03 c0       	rjmp	.+6      	; 0x3ee <map+0x160>
 3e8:	89 81       	ldd	r24, Y+1	; 0x01
 3ea:	84 60       	ori	r24, 0x04	; 4
 3ec:	07 c0       	rjmp	.+14     	; 0x3fc <map+0x16e>
 3ee:	89 81       	ldd	r24, Y+1	; 0x01
 3f0:	8b 7f       	andi	r24, 0xFB	; 251
 3f2:	04 c0       	rjmp	.+8      	; 0x3fc <map+0x16e>
		currLED = 3;
		
	val = SetBit(val, 3, GetBit(currLED, 1));
	val = SetBit(val, 2, GetBit(currLED, 0));
	
	return val;
 3f4:	80 e0       	ldi	r24, 0x00	; 0
	
	val = SetBit(val, 0, GetBit(color, 0));
	val = SetBit(val, 1, GetBit(color, 1));
	
	// Determine which column (0-3)
	unsigned char column = 0x00;
 3f6:	a9 cf       	rjmp	.-174    	; 0x34a <map+0xbc>
 3f8:	82 e0       	ldi	r24, 0x02	; 2
		}
	} else if (x < 36) {
		if (y >= 36) {
			column = 3;
		} else {
			column = 2;
 3fa:	a7 cf       	rjmp	.-178    	; 0x34a <map+0xbc>
 3fc:	26 96       	adiw	r28, 0x06	; 6
		
	val = SetBit(val, 3, GetBit(currLED, 1));
	val = SetBit(val, 2, GetBit(currLED, 0));
	
	return val;
 3fe:	0f b6       	in	r0, 0x3f	; 63
 400:	f8 94       	cli
 402:	de bf       	out	0x3e, r29	; 62
 404:	0f be       	out	0x3f, r0	; 63
 406:	cd bf       	out	0x3d, r28	; 61
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	1f 91       	pop	r17
 40e:	0f 91       	pop	r16
 410:	ff 90       	pop	r15
 412:	ef 90       	pop	r14
 414:	cf 90       	pop	r12
 416:	bf 90       	pop	r11
 418:	af 90       	pop	r10
 41a:	9f 90       	pop	r9
 41c:	8f 90       	pop	r8
 41e:	7f 90       	pop	r7
 420:	6f 90       	pop	r6
 422:	5f 90       	pop	r5
 424:	4f 90       	pop	r4
 426:	08 95       	ret

00000428 <main>:
 428:	80 e0       	ldi	r24, 0x00	; 0
#include "hc_sr04.h"
#include "mapper.h"

int main(void)
{
	initUSART(0); // initializes USART0
 42a:	bf de       	rcall	.-642    	; 0x1aa <initUSART>
	initUSART(1); // initializes USART1
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	bd de       	rcall	.-646    	; 0x1aa <initUSART>
    /* Replace with your application code */
	
	// One second period
	TimerSet(250);
 430:	6a ef       	ldi	r22, 0xFA	; 250
 432:	70 e0       	ldi	r23, 0x00	; 0
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 438:	47 de       	rcall	.-882    	; 0xc8 <TimerSet>
 43a:	57 de       	rcall	.-850    	; 0xea <TimerOn>
	
	struct hc_sr04 sen_x = {0, 1};
	struct hc_sr04 sen_y = {2, 3};
	struct hc_sr04 sen_z = {4, 5};
	
	initHC_SR04();
 43c:	ea de       	rcall	.-556    	; 0x212 <initHC_SR04>
 43e:	c0 ec       	ldi	r28, 0xC0	; 192
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 440:	d0 e0       	ldi	r29, 0x00	; 0
 442:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <TimerFlag>

	while (1) 
    {
		while(!TimerFlag) {}
 446:	88 23       	and	r24, r24
 448:	e1 f3       	breq	.-8      	; 0x442 <main+0x1a>
		double x = readHC_SR04(sen_x.m_trig, sen_x.m_echo);
 44a:	61 e0       	ldi	r22, 0x01	; 1
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	e6 de       	rcall	.-564    	; 0x21c <readHC_SR04>
 450:	4b 01       	movw	r8, r22
 452:	5c 01       	movw	r10, r24
		double y = readHC_SR04(sen_y.m_trig, sen_y.m_echo);
 454:	63 e0       	ldi	r22, 0x03	; 3
 456:	82 e0       	ldi	r24, 0x02	; 2
 458:	e1 de       	rcall	.-574    	; 0x21c <readHC_SR04>
 45a:	2b 01       	movw	r4, r22
 45c:	3c 01       	movw	r6, r24
		double z = readHC_SR04(sen_z.m_trig, sen_z.m_echo);
 45e:	65 e0       	ldi	r22, 0x05	; 5
 460:	84 e0       	ldi	r24, 0x04	; 4
 462:	dc de       	rcall	.-584    	; 0x21c <readHC_SR04>
 464:	28 81       	ld	r18, Y
 466:	25 ff       	sbrs	r18, 5
		if ( USART_IsSendReady(0) ) {
 468:	0c c0       	rjmp	.+24     	; 0x482 <main+0x5a>
 46a:	68 94       	set
			USART_Send(map(x, y, z, 2), 0);
 46c:	cc 24       	eor	r12, r12
 46e:	c1 f8       	bld	r12, 1
 470:	7b 01       	movw	r14, r22
 472:	8c 01       	movw	r16, r24
 474:	a3 01       	movw	r20, r6
 476:	92 01       	movw	r18, r4
 478:	c5 01       	movw	r24, r10
 47a:	b4 01       	movw	r22, r8
 47c:	08 df       	rcall	.-496    	; 0x28e <map>
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	b6 de       	rcall	.-660    	; 0x1ee <USART_Send>
 482:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <TimerFlag>
		}
		TimerFlag = 0;
 486:	dd cf       	rjmp	.-70     	; 0x442 <main+0x1a>

00000488 <__subsf3>:

    }
 488:	50 58       	subi	r21, 0x80	; 128

0000048a <__addsf3>:
 48a:	bb 27       	eor	r27, r27
 48c:	aa 27       	eor	r26, r26
 48e:	0e d0       	rcall	.+28     	; 0x4ac <__addsf3x>
 490:	9f c0       	rjmp	.+318    	; 0x5d0 <__fp_round>
 492:	90 d0       	rcall	.+288    	; 0x5b4 <__fp_pscA>
 494:	30 f0       	brcs	.+12     	; 0x4a2 <__addsf3+0x18>
 496:	95 d0       	rcall	.+298    	; 0x5c2 <__fp_pscB>
 498:	20 f0       	brcs	.+8      	; 0x4a2 <__addsf3+0x18>
 49a:	31 f4       	brne	.+12     	; 0x4a8 <__addsf3+0x1e>
 49c:	9f 3f       	cpi	r25, 0xFF	; 255
 49e:	11 f4       	brne	.+4      	; 0x4a4 <__addsf3+0x1a>
 4a0:	1e f4       	brtc	.+6      	; 0x4a8 <__addsf3+0x1e>
 4a2:	85 c0       	rjmp	.+266    	; 0x5ae <__fp_nan>
 4a4:	0e f4       	brtc	.+2      	; 0x4a8 <__addsf3+0x1e>
 4a6:	e0 95       	com	r30
 4a8:	e7 fb       	bst	r30, 7
 4aa:	7b c0       	rjmp	.+246    	; 0x5a2 <__fp_inf>

000004ac <__addsf3x>:
 4ac:	e9 2f       	mov	r30, r25
 4ae:	a1 d0       	rcall	.+322    	; 0x5f2 <__fp_split3>
 4b0:	80 f3       	brcs	.-32     	; 0x492 <__addsf3+0x8>
 4b2:	ba 17       	cp	r27, r26
 4b4:	62 07       	cpc	r22, r18
 4b6:	73 07       	cpc	r23, r19
 4b8:	84 07       	cpc	r24, r20
 4ba:	95 07       	cpc	r25, r21
 4bc:	18 f0       	brcs	.+6      	; 0x4c4 <__addsf3x+0x18>
 4be:	71 f4       	brne	.+28     	; 0x4dc <__addsf3x+0x30>
 4c0:	9e f5       	brtc	.+102    	; 0x528 <__addsf3x+0x7c>
 4c2:	b9 c0       	rjmp	.+370    	; 0x636 <__fp_zero>
 4c4:	0e f4       	brtc	.+2      	; 0x4c8 <__addsf3x+0x1c>
 4c6:	e0 95       	com	r30
 4c8:	0b 2e       	mov	r0, r27
 4ca:	ba 2f       	mov	r27, r26
 4cc:	a0 2d       	mov	r26, r0
 4ce:	0b 01       	movw	r0, r22
 4d0:	b9 01       	movw	r22, r18
 4d2:	90 01       	movw	r18, r0
 4d4:	0c 01       	movw	r0, r24
 4d6:	ca 01       	movw	r24, r20
 4d8:	a0 01       	movw	r20, r0
 4da:	11 24       	eor	r1, r1
 4dc:	ff 27       	eor	r31, r31
 4de:	59 1b       	sub	r21, r25
 4e0:	99 f0       	breq	.+38     	; 0x508 <__addsf3x+0x5c>
 4e2:	59 3f       	cpi	r21, 0xF9	; 249
 4e4:	50 f4       	brcc	.+20     	; 0x4fa <__addsf3x+0x4e>
 4e6:	50 3e       	cpi	r21, 0xE0	; 224
 4e8:	68 f1       	brcs	.+90     	; 0x544 <__addsf3x+0x98>
 4ea:	1a 16       	cp	r1, r26
 4ec:	f0 40       	sbci	r31, 0x00	; 0
 4ee:	a2 2f       	mov	r26, r18
 4f0:	23 2f       	mov	r18, r19
 4f2:	34 2f       	mov	r19, r20
 4f4:	44 27       	eor	r20, r20
 4f6:	58 5f       	subi	r21, 0xF8	; 248
 4f8:	f3 cf       	rjmp	.-26     	; 0x4e0 <__addsf3x+0x34>
 4fa:	46 95       	lsr	r20
 4fc:	37 95       	ror	r19
 4fe:	27 95       	ror	r18
 500:	a7 95       	ror	r26
 502:	f0 40       	sbci	r31, 0x00	; 0
 504:	53 95       	inc	r21
 506:	c9 f7       	brne	.-14     	; 0x4fa <__addsf3x+0x4e>
 508:	7e f4       	brtc	.+30     	; 0x528 <__addsf3x+0x7c>
 50a:	1f 16       	cp	r1, r31
 50c:	ba 0b       	sbc	r27, r26
 50e:	62 0b       	sbc	r22, r18
 510:	73 0b       	sbc	r23, r19
 512:	84 0b       	sbc	r24, r20
 514:	ba f0       	brmi	.+46     	; 0x544 <__addsf3x+0x98>
 516:	91 50       	subi	r25, 0x01	; 1
 518:	a1 f0       	breq	.+40     	; 0x542 <__addsf3x+0x96>
 51a:	ff 0f       	add	r31, r31
 51c:	bb 1f       	adc	r27, r27
 51e:	66 1f       	adc	r22, r22
 520:	77 1f       	adc	r23, r23
 522:	88 1f       	adc	r24, r24
 524:	c2 f7       	brpl	.-16     	; 0x516 <__addsf3x+0x6a>
 526:	0e c0       	rjmp	.+28     	; 0x544 <__addsf3x+0x98>
 528:	ba 0f       	add	r27, r26
 52a:	62 1f       	adc	r22, r18
 52c:	73 1f       	adc	r23, r19
 52e:	84 1f       	adc	r24, r20
 530:	48 f4       	brcc	.+18     	; 0x544 <__addsf3x+0x98>
 532:	87 95       	ror	r24
 534:	77 95       	ror	r23
 536:	67 95       	ror	r22
 538:	b7 95       	ror	r27
 53a:	f7 95       	ror	r31
 53c:	9e 3f       	cpi	r25, 0xFE	; 254
 53e:	08 f0       	brcs	.+2      	; 0x542 <__addsf3x+0x96>
 540:	b3 cf       	rjmp	.-154    	; 0x4a8 <__addsf3+0x1e>
 542:	93 95       	inc	r25
 544:	88 0f       	add	r24, r24
 546:	08 f0       	brcs	.+2      	; 0x54a <__addsf3x+0x9e>
 548:	99 27       	eor	r25, r25
 54a:	ee 0f       	add	r30, r30
 54c:	97 95       	ror	r25
 54e:	87 95       	ror	r24
 550:	08 95       	ret

00000552 <__cmpsf2>:
 552:	03 d0       	rcall	.+6      	; 0x55a <__fp_cmp>
 554:	08 f4       	brcc	.+2      	; 0x558 <__cmpsf2+0x6>
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	08 95       	ret

0000055a <__fp_cmp>:
 55a:	99 0f       	add	r25, r25
 55c:	00 08       	sbc	r0, r0
 55e:	55 0f       	add	r21, r21
 560:	aa 0b       	sbc	r26, r26
 562:	e0 e8       	ldi	r30, 0x80	; 128
 564:	fe ef       	ldi	r31, 0xFE	; 254
 566:	16 16       	cp	r1, r22
 568:	17 06       	cpc	r1, r23
 56a:	e8 07       	cpc	r30, r24
 56c:	f9 07       	cpc	r31, r25
 56e:	c0 f0       	brcs	.+48     	; 0x5a0 <__fp_cmp+0x46>
 570:	12 16       	cp	r1, r18
 572:	13 06       	cpc	r1, r19
 574:	e4 07       	cpc	r30, r20
 576:	f5 07       	cpc	r31, r21
 578:	98 f0       	brcs	.+38     	; 0x5a0 <__fp_cmp+0x46>
 57a:	62 1b       	sub	r22, r18
 57c:	73 0b       	sbc	r23, r19
 57e:	84 0b       	sbc	r24, r20
 580:	95 0b       	sbc	r25, r21
 582:	39 f4       	brne	.+14     	; 0x592 <__fp_cmp+0x38>
 584:	0a 26       	eor	r0, r26
 586:	61 f0       	breq	.+24     	; 0x5a0 <__fp_cmp+0x46>
 588:	23 2b       	or	r18, r19
 58a:	24 2b       	or	r18, r20
 58c:	25 2b       	or	r18, r21
 58e:	21 f4       	brne	.+8      	; 0x598 <__fp_cmp+0x3e>
 590:	08 95       	ret
 592:	0a 26       	eor	r0, r26
 594:	09 f4       	brne	.+2      	; 0x598 <__fp_cmp+0x3e>
 596:	a1 40       	sbci	r26, 0x01	; 1
 598:	a6 95       	lsr	r26
 59a:	8f ef       	ldi	r24, 0xFF	; 255
 59c:	81 1d       	adc	r24, r1
 59e:	81 1d       	adc	r24, r1
 5a0:	08 95       	ret

000005a2 <__fp_inf>:
 5a2:	97 f9       	bld	r25, 7
 5a4:	9f 67       	ori	r25, 0x7F	; 127
 5a6:	80 e8       	ldi	r24, 0x80	; 128
 5a8:	70 e0       	ldi	r23, 0x00	; 0
 5aa:	60 e0       	ldi	r22, 0x00	; 0
 5ac:	08 95       	ret

000005ae <__fp_nan>:
 5ae:	9f ef       	ldi	r25, 0xFF	; 255
 5b0:	80 ec       	ldi	r24, 0xC0	; 192
 5b2:	08 95       	ret

000005b4 <__fp_pscA>:
 5b4:	00 24       	eor	r0, r0
 5b6:	0a 94       	dec	r0
 5b8:	16 16       	cp	r1, r22
 5ba:	17 06       	cpc	r1, r23
 5bc:	18 06       	cpc	r1, r24
 5be:	09 06       	cpc	r0, r25
 5c0:	08 95       	ret

000005c2 <__fp_pscB>:
 5c2:	00 24       	eor	r0, r0
 5c4:	0a 94       	dec	r0
 5c6:	12 16       	cp	r1, r18
 5c8:	13 06       	cpc	r1, r19
 5ca:	14 06       	cpc	r1, r20
 5cc:	05 06       	cpc	r0, r21
 5ce:	08 95       	ret

000005d0 <__fp_round>:
 5d0:	09 2e       	mov	r0, r25
 5d2:	03 94       	inc	r0
 5d4:	00 0c       	add	r0, r0
 5d6:	11 f4       	brne	.+4      	; 0x5dc <__fp_round+0xc>
 5d8:	88 23       	and	r24, r24
 5da:	52 f0       	brmi	.+20     	; 0x5f0 <__fp_round+0x20>
 5dc:	bb 0f       	add	r27, r27
 5de:	40 f4       	brcc	.+16     	; 0x5f0 <__fp_round+0x20>
 5e0:	bf 2b       	or	r27, r31
 5e2:	11 f4       	brne	.+4      	; 0x5e8 <__fp_round+0x18>
 5e4:	60 ff       	sbrs	r22, 0
 5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <__fp_round+0x20>
 5e8:	6f 5f       	subi	r22, 0xFF	; 255
 5ea:	7f 4f       	sbci	r23, 0xFF	; 255
 5ec:	8f 4f       	sbci	r24, 0xFF	; 255
 5ee:	9f 4f       	sbci	r25, 0xFF	; 255
 5f0:	08 95       	ret

000005f2 <__fp_split3>:
 5f2:	57 fd       	sbrc	r21, 7
 5f4:	90 58       	subi	r25, 0x80	; 128
 5f6:	44 0f       	add	r20, r20
 5f8:	55 1f       	adc	r21, r21
 5fa:	59 f0       	breq	.+22     	; 0x612 <__fp_splitA+0x10>
 5fc:	5f 3f       	cpi	r21, 0xFF	; 255
 5fe:	71 f0       	breq	.+28     	; 0x61c <__fp_splitA+0x1a>
 600:	47 95       	ror	r20

00000602 <__fp_splitA>:
 602:	88 0f       	add	r24, r24
 604:	97 fb       	bst	r25, 7
 606:	99 1f       	adc	r25, r25
 608:	61 f0       	breq	.+24     	; 0x622 <__fp_splitA+0x20>
 60a:	9f 3f       	cpi	r25, 0xFF	; 255
 60c:	79 f0       	breq	.+30     	; 0x62c <__fp_splitA+0x2a>
 60e:	87 95       	ror	r24
 610:	08 95       	ret
 612:	12 16       	cp	r1, r18
 614:	13 06       	cpc	r1, r19
 616:	14 06       	cpc	r1, r20
 618:	55 1f       	adc	r21, r21
 61a:	f2 cf       	rjmp	.-28     	; 0x600 <__fp_split3+0xe>
 61c:	46 95       	lsr	r20
 61e:	f1 df       	rcall	.-30     	; 0x602 <__fp_splitA>
 620:	08 c0       	rjmp	.+16     	; 0x632 <__fp_splitA+0x30>
 622:	16 16       	cp	r1, r22
 624:	17 06       	cpc	r1, r23
 626:	18 06       	cpc	r1, r24
 628:	99 1f       	adc	r25, r25
 62a:	f1 cf       	rjmp	.-30     	; 0x60e <__fp_splitA+0xc>
 62c:	86 95       	lsr	r24
 62e:	71 05       	cpc	r23, r1
 630:	61 05       	cpc	r22, r1
 632:	08 94       	sec
 634:	08 95       	ret

00000636 <__fp_zero>:
 636:	e8 94       	clt

00000638 <__fp_szero>:
 638:	bb 27       	eor	r27, r27
 63a:	66 27       	eor	r22, r22
 63c:	77 27       	eor	r23, r23
 63e:	cb 01       	movw	r24, r22
 640:	97 f9       	bld	r25, 7
 642:	08 95       	ret

00000644 <__gesf2>:
 644:	8a df       	rcall	.-236    	; 0x55a <__fp_cmp>
 646:	08 f4       	brcc	.+2      	; 0x64a <__gesf2+0x6>
 648:	8f ef       	ldi	r24, 0xFF	; 255
 64a:	08 95       	ret

0000064c <_exit>:
 64c:	f8 94       	cli

0000064e <__stop_program>:
 64e:	ff cf       	rjmp	.-2      	; 0x64e <__stop_program>
