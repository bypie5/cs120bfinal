
testuart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000005a8  0000063c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800104  00800104  00000640  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000670  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001233  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a32  00000000  00000000  000019d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009dd  00000000  00000000  00002405  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  00002de4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005fe  00000000  00000000  00003030  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a30  00000000  00000000  0000362e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  0000405e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ea       	ldi	r30, 0xA8	; 168
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 30       	cpi	r26, 0x0B	; 11
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	69 d1       	rcall	.+722    	; 0x396 <main>
  c4:	6f c2       	rjmp	.+1246   	; 0x5a4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
		return UDR1;
	}
}
  c8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
  cc:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
  d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
  d4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
  d8:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <_avr_timer_cntcurr>
  dc:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <_avr_timer_cntcurr+0x1>
  e0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_cntcurr+0x2>
  e4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_cntcurr+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 10e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 112:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 116:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 11a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
 11e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 122:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 126:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_cntcurr>
 148:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x1>
 14c:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x2>
 150:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
 15e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 162:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 166:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <TimerFlag>
 178:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 17c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 180:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 184:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 188:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
 18c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 190:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 194:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <initUSART>:
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	81 f0       	breq	.+32     	; 0x1ce <initUSART+0x24>
 1ae:	e1 ec       	ldi	r30, 0xC1	; 193
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	88 61       	ori	r24, 0x18	; 24
 1b6:	80 83       	st	Z, r24
 1b8:	e2 ec       	ldi	r30, 0xC2	; 194
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	86 60       	ori	r24, 0x06	; 6
 1c0:	80 83       	st	Z, r24
 1c2:	83 e3       	ldi	r24, 0x33	; 51
 1c4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 1c8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1cc:	08 95       	ret
 1ce:	e9 ec       	ldi	r30, 0xC9	; 201
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	88 61       	ori	r24, 0x18	; 24
 1d6:	80 83       	st	Z, r24
 1d8:	ea ec       	ldi	r30, 0xCA	; 202
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	86 60       	ori	r24, 0x06	; 6
 1e0:	80 83       	st	Z, r24
 1e2:	83 e3       	ldi	r24, 0x33	; 51
 1e4:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 1e8:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 1ec:	08 95       	ret

000001ee <USART_Send>:
 1ee:	61 30       	cpi	r22, 0x01	; 1
 1f0:	41 f0       	breq	.+16     	; 0x202 <USART_Send+0x14>
 1f2:	e0 ec       	ldi	r30, 0xC0	; 192
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	90 81       	ld	r25, Z
 1f8:	95 ff       	sbrs	r25, 5
 1fa:	fd cf       	rjmp	.-6      	; 0x1f6 <USART_Send+0x8>
 1fc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 200:	08 95       	ret
 202:	e8 ec       	ldi	r30, 0xC8	; 200
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	90 81       	ld	r25, Z
 208:	95 ff       	sbrs	r25, 5
 20a:	fd cf       	rjmp	.-6      	; 0x206 <USART_Send+0x18>
 20c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 210:	08 95       	ret

00000212 <initHC_SR04>:
	Trigger Pin A0 -> OUTPUT
	Echo Pin A1 -> INPUT
	0 0 0 0 0 0 E T
	x x x x x x 0 1 : DDRx
	*/
	DDRA = 0x55; PORTA = 0xAA;
 212:	95 e5       	ldi	r25, 0x55	; 85
 214:	91 b9       	out	0x01, r25	; 1
 216:	9a ea       	ldi	r25, 0xAA	; 170
 218:	92 b9       	out	0x02, r25	; 2
	m_trig = trig;
 21a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <m_trig>
	m_echo = echo;
 21e:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
 222:	08 95       	ret

00000224 <readHC_SR04>:
}


double readHC_SR04() {
 224:	cf 93       	push	r28
	double duration = 0;
	
	PORTA = SetBit(PORTA, m_trig, 0);
 226:	32 b1       	in	r19, 0x02	; 2
//Functionality - Sets bit on a PORTx
//Parameter: Takes in a uChar for a PORTx, the pin number and the binary value 
//Returns: The new value of the PORTx
unsigned char SetBit(unsigned char pin, unsigned char number, unsigned char bin_value) 
{
	return (bin_value ? pin | (0x01 << number) : pin & ~(0x01 << number));
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	ac 01       	movw	r20, r24
 22e:	00 90 05 01 	lds	r0, 0x0105	; 0x800105 <m_trig>
 232:	02 c0       	rjmp	.+4      	; 0x238 <readHC_SR04+0x14>
 234:	44 0f       	add	r20, r20
 236:	55 1f       	adc	r21, r21
 238:	0a 94       	dec	r0
 23a:	e2 f7       	brpl	.-8      	; 0x234 <readHC_SR04+0x10>
 23c:	24 2f       	mov	r18, r20
 23e:	20 95       	com	r18
 240:	23 23       	and	r18, r19
 242:	22 b9       	out	0x02, r18	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 244:	25 e0       	ldi	r18, 0x05	; 5
 246:	2a 95       	dec	r18
 248:	f1 f7       	brne	.-4      	; 0x246 <readHC_SR04+0x22>
 24a:	00 00       	nop
	_delay_us(2);

	// 10 microseconds high
	PORTA = SetBit(PORTA, m_trig, 1);
 24c:	42 b1       	in	r20, 0x02	; 2
 24e:	9c 01       	movw	r18, r24
 250:	00 90 05 01 	lds	r0, 0x0105	; 0x800105 <m_trig>
 254:	02 c0       	rjmp	.+4      	; 0x25a <readHC_SR04+0x36>
 256:	22 0f       	add	r18, r18
 258:	33 1f       	adc	r19, r19
 25a:	0a 94       	dec	r0
 25c:	e2 f7       	brpl	.-8      	; 0x256 <readHC_SR04+0x32>
 25e:	24 2b       	or	r18, r20
 260:	22 b9       	out	0x02, r18	; 2
 262:	2a e1       	ldi	r18, 0x1A	; 26
 264:	2a 95       	dec	r18
 266:	f1 f7       	brne	.-4      	; 0x264 <readHC_SR04+0x40>
 268:	00 c0       	rjmp	.+0      	; 0x26a <readHC_SR04+0x46>
	_delay_us(10);
	PORTA = SetBit(PORTA, m_trig, 0);
 26a:	32 b1       	in	r19, 0x02	; 2
 26c:	ac 01       	movw	r20, r24
 26e:	00 90 05 01 	lds	r0, 0x0105	; 0x800105 <m_trig>
 272:	02 c0       	rjmp	.+4      	; 0x278 <readHC_SR04+0x54>
 274:	44 0f       	add	r20, r20
 276:	55 1f       	adc	r21, r21
 278:	0a 94       	dec	r0
 27a:	e2 f7       	brpl	.-8      	; 0x274 <readHC_SR04+0x50>
 27c:	24 2f       	mov	r18, r20
 27e:	20 95       	com	r18
 280:	23 23       	and	r18, r19
 282:	22 b9       	out	0x02, r18	; 2
//Functionality - Gets bit from a PINx
//Parameter: Takes in a uChar for a PINx and the pin number
//Returns: The value of the PINx
unsigned char GetBit(unsigned char port, unsigned char number) 
{
	return ( port & (0x01 << number) );
 284:	9c 01       	movw	r18, r24
 286:	00 90 04 01 	lds	r0, 0x0104	; 0x800104 <__data_end>
 28a:	02 c0       	rjmp	.+4      	; 0x290 <readHC_SR04+0x6c>
 28c:	22 0f       	add	r18, r18
 28e:	33 1f       	adc	r19, r19
 290:	0a 94       	dec	r0
 292:	e2 f7       	brpl	.-8      	; 0x28c <readHC_SR04+0x68>
 294:	c2 2f       	mov	r28, r18
	
	while (!GetBit(PINA, m_echo)) {}
 296:	80 b1       	in	r24, 0x00	; 0
 298:	8c 23       	and	r24, r28
 29a:	e9 f3       	breq	.-6      	; 0x296 <readHC_SR04+0x72>
		
	while (GetBit(PINA, m_echo)) {duration++;}
 29c:	80 b1       	in	r24, 0x00	; 0
 29e:	82 23       	and	r24, r18
 2a0:	61 f0       	breq	.+24     	; 0x2ba <readHC_SR04+0x96>
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	70 e0       	ldi	r23, 0x00	; 0
 2a6:	cb 01       	movw	r24, r22
 2a8:	20 e0       	ldi	r18, 0x00	; 0
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	40 e8       	ldi	r20, 0x80	; 128
 2ae:	5f e3       	ldi	r21, 0x3F	; 63
 2b0:	98 d0       	rcall	.+304    	; 0x3e2 <__addsf3>
 2b2:	20 b1       	in	r18, 0x00	; 0
 2b4:	2c 23       	and	r18, r28
 2b6:	c1 f7       	brne	.-16     	; 0x2a8 <readHC_SR04+0x84>
 2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <readHC_SR04+0x9c>
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	70 e0       	ldi	r23, 0x00	; 0
 2be:	cb 01       	movw	r24, r22
	
	double distance = duration * 0.034/2.0;
	
	return duration;
}
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <map>:
#include "bit.h"

// xxxx   xx  xx
// column led color
unsigned char map(double x, double y, double z, unsigned char u_color) {
 2c4:	8f 92       	push	r8
 2c6:	9f 92       	push	r9
 2c8:	af 92       	push	r10
 2ca:	bf 92       	push	r11
 2cc:	cf 92       	push	r12
 2ce:	ef 92       	push	r14
 2d0:	ff 92       	push	r15
 2d2:	0f 93       	push	r16
 2d4:	1f 93       	push	r17
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	47 01       	movw	r8, r14
 2dc:	58 01       	movw	r10, r16
//Functionality - Sets bit on a PORTx
//Parameter: Takes in a uChar for a PORTx, the pin number and the binary value 
//Returns: The new value of the PORTx
unsigned char SetBit(unsigned char pin, unsigned char number, unsigned char bin_value) 
{
	return (bin_value ? pin | (0x01 << number) : pin & ~(0x01 << number));
 2de:	cc 2d       	mov	r28, r12
 2e0:	c1 70       	andi	r28, 0x01	; 1
 2e2:	c1 fe       	sbrs	r12, 1
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <map+0x26>
 2e6:	c2 60       	ori	r28, 0x02	; 2
 2e8:	01 c0       	rjmp	.+2      	; 0x2ec <map+0x28>
 2ea:	cd 7f       	andi	r28, 0xFD	; 253
	val = SetBit(val, 5, GetBit(column, 1));
	
	// Determine the z axis
	// 60 - 12
	unsigned char currLED = 0x00;
	if (z >= 48)
 2ec:	20 e0       	ldi	r18, 0x00	; 0
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	40 e4       	ldi	r20, 0x40	; 64
 2f2:	52 e4       	ldi	r21, 0x42	; 66
 2f4:	c5 01       	movw	r24, r10
 2f6:	b4 01       	movw	r22, r8
 2f8:	51 d1       	rcall	.+674    	; 0x59c <__gesf2>
 2fa:	88 23       	and	r24, r24
 2fc:	14 f0       	brlt	.+4      	; 0x302 <map+0x3e>
		currLED = 3;
 2fe:	d3 e0       	ldi	r29, 0x03	; 3
 300:	01 c0       	rjmp	.+2      	; 0x304 <map+0x40>
	val = SetBit(val, 4, GetBit(column, 0));
	val = SetBit(val, 5, GetBit(column, 1));
	
	// Determine the z axis
	// 60 - 12
	unsigned char currLED = 0x00;
 302:	d0 e0       	ldi	r29, 0x00	; 0
	if (z >= 48)
		currLED = 3;
		
	if (z < 48 && z >= 36)
 304:	20 e0       	ldi	r18, 0x00	; 0
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	40 e4       	ldi	r20, 0x40	; 64
 30a:	52 e4       	ldi	r21, 0x42	; 66
 30c:	c5 01       	movw	r24, r10
 30e:	b4 01       	movw	r22, r8
 310:	cc d0       	rcall	.+408    	; 0x4aa <__cmpsf2>
 312:	88 23       	and	r24, r24
 314:	54 f4       	brge	.+20     	; 0x32a <map+0x66>
 316:	20 e0       	ldi	r18, 0x00	; 0
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	40 e1       	ldi	r20, 0x10	; 16
 31c:	52 e4       	ldi	r21, 0x42	; 66
 31e:	c5 01       	movw	r24, r10
 320:	b4 01       	movw	r22, r8
 322:	3c d1       	rcall	.+632    	; 0x59c <__gesf2>
 324:	88 23       	and	r24, r24
 326:	0c f0       	brlt	.+2      	; 0x32a <map+0x66>
		currLED = 2;
 328:	d2 e0       	ldi	r29, 0x02	; 2
		
	if (z < 36 && z >= 24)
 32a:	20 e0       	ldi	r18, 0x00	; 0
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	40 e1       	ldi	r20, 0x10	; 16
 330:	52 e4       	ldi	r21, 0x42	; 66
 332:	c5 01       	movw	r24, r10
 334:	b4 01       	movw	r22, r8
 336:	b9 d0       	rcall	.+370    	; 0x4aa <__cmpsf2>
 338:	88 23       	and	r24, r24
 33a:	54 f4       	brge	.+20     	; 0x350 <map+0x8c>
 33c:	20 e0       	ldi	r18, 0x00	; 0
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	40 ec       	ldi	r20, 0xC0	; 192
 342:	51 e4       	ldi	r21, 0x41	; 65
 344:	c5 01       	movw	r24, r10
 346:	b4 01       	movw	r22, r8
 348:	29 d1       	rcall	.+594    	; 0x59c <__gesf2>
 34a:	88 23       	and	r24, r24
 34c:	0c f0       	brlt	.+2      	; 0x350 <map+0x8c>
		currLED = 1;
 34e:	d1 e0       	ldi	r29, 0x01	; 1
		
	if (z < 24)
 350:	20 e0       	ldi	r18, 0x00	; 0
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	40 ec       	ldi	r20, 0xC0	; 192
 356:	51 e4       	ldi	r21, 0x41	; 65
 358:	c5 01       	movw	r24, r10
 35a:	b4 01       	movw	r22, r8
 35c:	a6 d0       	rcall	.+332    	; 0x4aa <__cmpsf2>
 35e:	88 23       	and	r24, r24
 360:	34 f0       	brlt	.+12     	; 0x36e <map+0xaa>
//Functionality - Gets bit from a PINx
//Parameter: Takes in a uChar for a PINx and the pin number
//Returns: The value of the PINx
unsigned char GetBit(unsigned char port, unsigned char number) 
{
	return ( port & (0x01 << number) );
 362:	9d 2f       	mov	r25, r29
//Functionality - Sets bit on a PORTx
//Parameter: Takes in a uChar for a PORTx, the pin number and the binary value 
//Returns: The new value of the PORTx
unsigned char SetBit(unsigned char pin, unsigned char number, unsigned char bin_value) 
{
	return (bin_value ? pin | (0x01 << number) : pin & ~(0x01 << number));
 364:	d2 70       	andi	r29, 0x02	; 2
 366:	21 f0       	breq	.+8      	; 0x370 <map+0xac>
 368:	8c 2f       	mov	r24, r28
 36a:	88 63       	ori	r24, 0x38	; 56
 36c:	03 c0       	rjmp	.+6      	; 0x374 <map+0xb0>
//Functionality - Gets bit from a PINx
//Parameter: Takes in a uChar for a PINx and the pin number
//Returns: The value of the PINx
unsigned char GetBit(unsigned char port, unsigned char number) 
{
	return ( port & (0x01 << number) );
 36e:	90 e0       	ldi	r25, 0x00	; 0
//Functionality - Sets bit on a PORTx
//Parameter: Takes in a uChar for a PORTx, the pin number and the binary value 
//Returns: The new value of the PORTx
unsigned char SetBit(unsigned char pin, unsigned char number, unsigned char bin_value) 
{
	return (bin_value ? pin | (0x01 << number) : pin & ~(0x01 << number));
 370:	8c 2f       	mov	r24, r28
 372:	80 63       	ori	r24, 0x30	; 48
 374:	90 ff       	sbrs	r25, 0
 376:	02 c0       	rjmp	.+4      	; 0x37c <map+0xb8>
 378:	84 60       	ori	r24, 0x04	; 4
 37a:	01 c0       	rjmp	.+2      	; 0x37e <map+0xba>
 37c:	8b 7f       	andi	r24, 0xFB	; 251
		
	val = SetBit(val, 3, GetBit(currLED, 1));
	val = SetBit(val, 2, GetBit(currLED, 0));
	
	return val;
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	1f 91       	pop	r17
 384:	0f 91       	pop	r16
 386:	ff 90       	pop	r15
 388:	ef 90       	pop	r14
 38a:	cf 90       	pop	r12
 38c:	bf 90       	pop	r11
 38e:	af 90       	pop	r10
 390:	9f 90       	pop	r9
 392:	8f 90       	pop	r8
 394:	08 95       	ret

00000396 <main>:
#include "hc_sr04.h"
#include "mapper.h"

int main(void)
{
	initUSART(0); // initializes USART0
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	08 df       	rcall	.-496    	; 0x1aa <initUSART>
	initUSART(1); // initializes USART1
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	06 df       	rcall	.-500    	; 0x1aa <initUSART>
    /* Replace with your application code */
	
	// One second period
	TimerSet(10);
 39e:	6a e0       	ldi	r22, 0x0A	; 10
 3a0:	70 e0       	ldi	r23, 0x00	; 0
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 3a6:	90 de       	rcall	.-736    	; 0xc8 <TimerSet>
	
	initHC_SR04(4,5);
 3a8:	a0 de       	rcall	.-704    	; 0xea <TimerOn>
 3aa:	65 e0       	ldi	r22, 0x05	; 5
 3ac:	84 e0       	ldi	r24, 0x04	; 4
 3ae:	31 df       	rcall	.-414    	; 0x212 <initHC_SR04>
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 3b0:	c0 ec       	ldi	r28, 0xC0	; 192

	while (1) 
    {
		while(!TimerFlag) {}
 3b2:	d0 e0       	ldi	r29, 0x00	; 0
 3b4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <TimerFlag>
 3b8:	88 23       	and	r24, r24
		double z = readHC_SR04();
 3ba:	e1 f3       	breq	.-8      	; 0x3b4 <main+0x1e>
 3bc:	33 df       	rcall	.-410    	; 0x224 <readHC_SR04>
 3be:	28 81       	ld	r18, Y
		if ( USART_IsSendReady(0) ) {
 3c0:	25 ff       	sbrs	r18, 5
 3c2:	0b c0       	rjmp	.+22     	; 0x3da <main+0x44>
			USART_Send(map(0, 0, z, 0), 0);
 3c4:	c1 2c       	mov	r12, r1
 3c6:	7b 01       	movw	r14, r22
 3c8:	8c 01       	movw	r16, r24
 3ca:	20 e0       	ldi	r18, 0x00	; 0
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	a9 01       	movw	r20, r18
 3d0:	ca 01       	movw	r24, r20
 3d2:	b9 01       	movw	r22, r18
 3d4:	77 df       	rcall	.-274    	; 0x2c4 <map>
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	0a df       	rcall	.-492    	; 0x1ee <USART_Send>
		}
		TimerFlag = 0;
 3da:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <TimerFlag>

    }
 3de:	ea cf       	rjmp	.-44     	; 0x3b4 <main+0x1e>

000003e0 <__subsf3>:
 3e0:	50 58       	subi	r21, 0x80	; 128

000003e2 <__addsf3>:
 3e2:	bb 27       	eor	r27, r27
 3e4:	aa 27       	eor	r26, r26
 3e6:	0e d0       	rcall	.+28     	; 0x404 <__addsf3x>
 3e8:	9f c0       	rjmp	.+318    	; 0x528 <__fp_round>
 3ea:	90 d0       	rcall	.+288    	; 0x50c <__fp_pscA>
 3ec:	30 f0       	brcs	.+12     	; 0x3fa <__addsf3+0x18>
 3ee:	95 d0       	rcall	.+298    	; 0x51a <__fp_pscB>
 3f0:	20 f0       	brcs	.+8      	; 0x3fa <__addsf3+0x18>
 3f2:	31 f4       	brne	.+12     	; 0x400 <__LOCK_REGION_LENGTH__>
 3f4:	9f 3f       	cpi	r25, 0xFF	; 255
 3f6:	11 f4       	brne	.+4      	; 0x3fc <__addsf3+0x1a>
 3f8:	1e f4       	brtc	.+6      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fa:	85 c0       	rjmp	.+266    	; 0x506 <__fp_nan>
 3fc:	0e f4       	brtc	.+2      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fe:	e0 95       	com	r30
 400:	e7 fb       	bst	r30, 7
 402:	7b c0       	rjmp	.+246    	; 0x4fa <__fp_inf>

00000404 <__addsf3x>:
 404:	e9 2f       	mov	r30, r25
 406:	a1 d0       	rcall	.+322    	; 0x54a <__fp_split3>
 408:	80 f3       	brcs	.-32     	; 0x3ea <__addsf3+0x8>
 40a:	ba 17       	cp	r27, r26
 40c:	62 07       	cpc	r22, r18
 40e:	73 07       	cpc	r23, r19
 410:	84 07       	cpc	r24, r20
 412:	95 07       	cpc	r25, r21
 414:	18 f0       	brcs	.+6      	; 0x41c <__addsf3x+0x18>
 416:	71 f4       	brne	.+28     	; 0x434 <__addsf3x+0x30>
 418:	9e f5       	brtc	.+102    	; 0x480 <__addsf3x+0x7c>
 41a:	b9 c0       	rjmp	.+370    	; 0x58e <__fp_zero>
 41c:	0e f4       	brtc	.+2      	; 0x420 <__addsf3x+0x1c>
 41e:	e0 95       	com	r30
 420:	0b 2e       	mov	r0, r27
 422:	ba 2f       	mov	r27, r26
 424:	a0 2d       	mov	r26, r0
 426:	0b 01       	movw	r0, r22
 428:	b9 01       	movw	r22, r18
 42a:	90 01       	movw	r18, r0
 42c:	0c 01       	movw	r0, r24
 42e:	ca 01       	movw	r24, r20
 430:	a0 01       	movw	r20, r0
 432:	11 24       	eor	r1, r1
 434:	ff 27       	eor	r31, r31
 436:	59 1b       	sub	r21, r25
 438:	99 f0       	breq	.+38     	; 0x460 <__addsf3x+0x5c>
 43a:	59 3f       	cpi	r21, 0xF9	; 249
 43c:	50 f4       	brcc	.+20     	; 0x452 <__addsf3x+0x4e>
 43e:	50 3e       	cpi	r21, 0xE0	; 224
 440:	68 f1       	brcs	.+90     	; 0x49c <__addsf3x+0x98>
 442:	1a 16       	cp	r1, r26
 444:	f0 40       	sbci	r31, 0x00	; 0
 446:	a2 2f       	mov	r26, r18
 448:	23 2f       	mov	r18, r19
 44a:	34 2f       	mov	r19, r20
 44c:	44 27       	eor	r20, r20
 44e:	58 5f       	subi	r21, 0xF8	; 248
 450:	f3 cf       	rjmp	.-26     	; 0x438 <__addsf3x+0x34>
 452:	46 95       	lsr	r20
 454:	37 95       	ror	r19
 456:	27 95       	ror	r18
 458:	a7 95       	ror	r26
 45a:	f0 40       	sbci	r31, 0x00	; 0
 45c:	53 95       	inc	r21
 45e:	c9 f7       	brne	.-14     	; 0x452 <__addsf3x+0x4e>
 460:	7e f4       	brtc	.+30     	; 0x480 <__addsf3x+0x7c>
 462:	1f 16       	cp	r1, r31
 464:	ba 0b       	sbc	r27, r26
 466:	62 0b       	sbc	r22, r18
 468:	73 0b       	sbc	r23, r19
 46a:	84 0b       	sbc	r24, r20
 46c:	ba f0       	brmi	.+46     	; 0x49c <__addsf3x+0x98>
 46e:	91 50       	subi	r25, 0x01	; 1
 470:	a1 f0       	breq	.+40     	; 0x49a <__addsf3x+0x96>
 472:	ff 0f       	add	r31, r31
 474:	bb 1f       	adc	r27, r27
 476:	66 1f       	adc	r22, r22
 478:	77 1f       	adc	r23, r23
 47a:	88 1f       	adc	r24, r24
 47c:	c2 f7       	brpl	.-16     	; 0x46e <__addsf3x+0x6a>
 47e:	0e c0       	rjmp	.+28     	; 0x49c <__addsf3x+0x98>
 480:	ba 0f       	add	r27, r26
 482:	62 1f       	adc	r22, r18
 484:	73 1f       	adc	r23, r19
 486:	84 1f       	adc	r24, r20
 488:	48 f4       	brcc	.+18     	; 0x49c <__addsf3x+0x98>
 48a:	87 95       	ror	r24
 48c:	77 95       	ror	r23
 48e:	67 95       	ror	r22
 490:	b7 95       	ror	r27
 492:	f7 95       	ror	r31
 494:	9e 3f       	cpi	r25, 0xFE	; 254
 496:	08 f0       	brcs	.+2      	; 0x49a <__addsf3x+0x96>
 498:	b3 cf       	rjmp	.-154    	; 0x400 <__LOCK_REGION_LENGTH__>
 49a:	93 95       	inc	r25
 49c:	88 0f       	add	r24, r24
 49e:	08 f0       	brcs	.+2      	; 0x4a2 <__addsf3x+0x9e>
 4a0:	99 27       	eor	r25, r25
 4a2:	ee 0f       	add	r30, r30
 4a4:	97 95       	ror	r25
 4a6:	87 95       	ror	r24
 4a8:	08 95       	ret

000004aa <__cmpsf2>:
 4aa:	03 d0       	rcall	.+6      	; 0x4b2 <__fp_cmp>
 4ac:	08 f4       	brcc	.+2      	; 0x4b0 <__cmpsf2+0x6>
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	08 95       	ret

000004b2 <__fp_cmp>:
 4b2:	99 0f       	add	r25, r25
 4b4:	00 08       	sbc	r0, r0
 4b6:	55 0f       	add	r21, r21
 4b8:	aa 0b       	sbc	r26, r26
 4ba:	e0 e8       	ldi	r30, 0x80	; 128
 4bc:	fe ef       	ldi	r31, 0xFE	; 254
 4be:	16 16       	cp	r1, r22
 4c0:	17 06       	cpc	r1, r23
 4c2:	e8 07       	cpc	r30, r24
 4c4:	f9 07       	cpc	r31, r25
 4c6:	c0 f0       	brcs	.+48     	; 0x4f8 <__fp_cmp+0x46>
 4c8:	12 16       	cp	r1, r18
 4ca:	13 06       	cpc	r1, r19
 4cc:	e4 07       	cpc	r30, r20
 4ce:	f5 07       	cpc	r31, r21
 4d0:	98 f0       	brcs	.+38     	; 0x4f8 <__fp_cmp+0x46>
 4d2:	62 1b       	sub	r22, r18
 4d4:	73 0b       	sbc	r23, r19
 4d6:	84 0b       	sbc	r24, r20
 4d8:	95 0b       	sbc	r25, r21
 4da:	39 f4       	brne	.+14     	; 0x4ea <__fp_cmp+0x38>
 4dc:	0a 26       	eor	r0, r26
 4de:	61 f0       	breq	.+24     	; 0x4f8 <__fp_cmp+0x46>
 4e0:	23 2b       	or	r18, r19
 4e2:	24 2b       	or	r18, r20
 4e4:	25 2b       	or	r18, r21
 4e6:	21 f4       	brne	.+8      	; 0x4f0 <__fp_cmp+0x3e>
 4e8:	08 95       	ret
 4ea:	0a 26       	eor	r0, r26
 4ec:	09 f4       	brne	.+2      	; 0x4f0 <__fp_cmp+0x3e>
 4ee:	a1 40       	sbci	r26, 0x01	; 1
 4f0:	a6 95       	lsr	r26
 4f2:	8f ef       	ldi	r24, 0xFF	; 255
 4f4:	81 1d       	adc	r24, r1
 4f6:	81 1d       	adc	r24, r1
 4f8:	08 95       	ret

000004fa <__fp_inf>:
 4fa:	97 f9       	bld	r25, 7
 4fc:	9f 67       	ori	r25, 0x7F	; 127
 4fe:	80 e8       	ldi	r24, 0x80	; 128
 500:	70 e0       	ldi	r23, 0x00	; 0
 502:	60 e0       	ldi	r22, 0x00	; 0
 504:	08 95       	ret

00000506 <__fp_nan>:
 506:	9f ef       	ldi	r25, 0xFF	; 255
 508:	80 ec       	ldi	r24, 0xC0	; 192
 50a:	08 95       	ret

0000050c <__fp_pscA>:
 50c:	00 24       	eor	r0, r0
 50e:	0a 94       	dec	r0
 510:	16 16       	cp	r1, r22
 512:	17 06       	cpc	r1, r23
 514:	18 06       	cpc	r1, r24
 516:	09 06       	cpc	r0, r25
 518:	08 95       	ret

0000051a <__fp_pscB>:
 51a:	00 24       	eor	r0, r0
 51c:	0a 94       	dec	r0
 51e:	12 16       	cp	r1, r18
 520:	13 06       	cpc	r1, r19
 522:	14 06       	cpc	r1, r20
 524:	05 06       	cpc	r0, r21
 526:	08 95       	ret

00000528 <__fp_round>:
 528:	09 2e       	mov	r0, r25
 52a:	03 94       	inc	r0
 52c:	00 0c       	add	r0, r0
 52e:	11 f4       	brne	.+4      	; 0x534 <__fp_round+0xc>
 530:	88 23       	and	r24, r24
 532:	52 f0       	brmi	.+20     	; 0x548 <__fp_round+0x20>
 534:	bb 0f       	add	r27, r27
 536:	40 f4       	brcc	.+16     	; 0x548 <__fp_round+0x20>
 538:	bf 2b       	or	r27, r31
 53a:	11 f4       	brne	.+4      	; 0x540 <__fp_round+0x18>
 53c:	60 ff       	sbrs	r22, 0
 53e:	04 c0       	rjmp	.+8      	; 0x548 <__fp_round+0x20>
 540:	6f 5f       	subi	r22, 0xFF	; 255
 542:	7f 4f       	sbci	r23, 0xFF	; 255
 544:	8f 4f       	sbci	r24, 0xFF	; 255
 546:	9f 4f       	sbci	r25, 0xFF	; 255
 548:	08 95       	ret

0000054a <__fp_split3>:
 54a:	57 fd       	sbrc	r21, 7
 54c:	90 58       	subi	r25, 0x80	; 128
 54e:	44 0f       	add	r20, r20
 550:	55 1f       	adc	r21, r21
 552:	59 f0       	breq	.+22     	; 0x56a <__fp_splitA+0x10>
 554:	5f 3f       	cpi	r21, 0xFF	; 255
 556:	71 f0       	breq	.+28     	; 0x574 <__fp_splitA+0x1a>
 558:	47 95       	ror	r20

0000055a <__fp_splitA>:
 55a:	88 0f       	add	r24, r24
 55c:	97 fb       	bst	r25, 7
 55e:	99 1f       	adc	r25, r25
 560:	61 f0       	breq	.+24     	; 0x57a <__fp_splitA+0x20>
 562:	9f 3f       	cpi	r25, 0xFF	; 255
 564:	79 f0       	breq	.+30     	; 0x584 <__fp_splitA+0x2a>
 566:	87 95       	ror	r24
 568:	08 95       	ret
 56a:	12 16       	cp	r1, r18
 56c:	13 06       	cpc	r1, r19
 56e:	14 06       	cpc	r1, r20
 570:	55 1f       	adc	r21, r21
 572:	f2 cf       	rjmp	.-28     	; 0x558 <__fp_split3+0xe>
 574:	46 95       	lsr	r20
 576:	f1 df       	rcall	.-30     	; 0x55a <__fp_splitA>
 578:	08 c0       	rjmp	.+16     	; 0x58a <__fp_splitA+0x30>
 57a:	16 16       	cp	r1, r22
 57c:	17 06       	cpc	r1, r23
 57e:	18 06       	cpc	r1, r24
 580:	99 1f       	adc	r25, r25
 582:	f1 cf       	rjmp	.-30     	; 0x566 <__fp_splitA+0xc>
 584:	86 95       	lsr	r24
 586:	71 05       	cpc	r23, r1
 588:	61 05       	cpc	r22, r1
 58a:	08 94       	sec
 58c:	08 95       	ret

0000058e <__fp_zero>:
 58e:	e8 94       	clt

00000590 <__fp_szero>:
 590:	bb 27       	eor	r27, r27
 592:	66 27       	eor	r22, r22
 594:	77 27       	eor	r23, r23
 596:	cb 01       	movw	r24, r22
 598:	97 f9       	bld	r25, 7
 59a:	08 95       	ret

0000059c <__gesf2>:
 59c:	8a df       	rcall	.-236    	; 0x4b2 <__fp_cmp>
 59e:	08 f4       	brcc	.+2      	; 0x5a2 <__gesf2+0x6>
 5a0:	8f ef       	ldi	r24, 0xFF	; 255
 5a2:	08 95       	ret

000005a4 <_exit>:
 5a4:	f8 94       	cli

000005a6 <__stop_program>:
 5a6:	ff cf       	rjmp	.-2      	; 0x5a6 <__stop_program>
