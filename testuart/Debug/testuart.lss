
testuart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000514  000005a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000514  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800104  00800104  000005ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010b6  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a32  00000000  00000000  000017c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000981  00000000  00000000  000021f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  00002b78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e8  00000000  00000000  00002da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008c2  00000000  00000000  00003390  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00003c52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e1       	ldi	r30, 0x14	; 20
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 30       	cpi	r26, 0x09	; 9
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	22 d1       	rcall	.+580    	; 0x308 <main>
  c4:	25 c2       	rjmp	.+1098   	; 0x510 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
		return UDR1;
	}
}
  c8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
  cc:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
  d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
  d4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
  d8:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
  dc:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
  e0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
  e4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 10e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 112:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 116:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 11a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 11e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 122:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 126:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 148:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 14c:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 150:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 15e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 162:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 166:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <TimerFlag>
 178:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 17c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 180:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 184:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 188:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 18c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 190:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 194:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <initUSART>:
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	81 f0       	breq	.+32     	; 0x1ce <initUSART+0x24>
 1ae:	e1 ec       	ldi	r30, 0xC1	; 193
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	88 61       	ori	r24, 0x18	; 24
 1b6:	80 83       	st	Z, r24
 1b8:	e2 ec       	ldi	r30, 0xC2	; 194
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	86 60       	ori	r24, 0x06	; 6
 1c0:	80 83       	st	Z, r24
 1c2:	83 e3       	ldi	r24, 0x33	; 51
 1c4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 1c8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1cc:	08 95       	ret
 1ce:	e9 ec       	ldi	r30, 0xC9	; 201
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	88 61       	ori	r24, 0x18	; 24
 1d6:	80 83       	st	Z, r24
 1d8:	ea ec       	ldi	r30, 0xCA	; 202
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	86 60       	ori	r24, 0x06	; 6
 1e0:	80 83       	st	Z, r24
 1e2:	83 e3       	ldi	r24, 0x33	; 51
 1e4:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 1e8:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 1ec:	08 95       	ret

000001ee <USART_Send>:
 1ee:	61 30       	cpi	r22, 0x01	; 1
 1f0:	41 f0       	breq	.+16     	; 0x202 <USART_Send+0x14>
 1f2:	e0 ec       	ldi	r30, 0xC0	; 192
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	90 81       	ld	r25, Z
 1f8:	95 ff       	sbrs	r25, 5
 1fa:	fd cf       	rjmp	.-6      	; 0x1f6 <USART_Send+0x8>
 1fc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 200:	08 95       	ret
 202:	e8 ec       	ldi	r30, 0xC8	; 200
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	90 81       	ld	r25, Z
 208:	95 ff       	sbrs	r25, 5
 20a:	fd cf       	rjmp	.-6      	; 0x206 <USART_Send+0x18>
 20c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 210:	08 95       	ret

00000212 <initHC_SR04>:
	Trigger Pin A0 -> OUTPUT
	Echo Pin A1 -> INPUT
	0 0 0 0 0 0 E T
	x x x x x x 0 1 : DDRx
	*/
	DDRA = 0x01; PORTA = 0x02;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	81 b9       	out	0x01, r24	; 1
 216:	82 e0       	ldi	r24, 0x02	; 2
 218:	82 b9       	out	0x02, r24	; 2
 21a:	08 95       	ret

0000021c <readHC_SR04>:


double readHC_SR04() {
	double duration = 0;
	
	PORTA = SetBit(PORTA, 0, 0);
 21c:	10 98       	cbi	0x02, 0	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21e:	85 e0       	ldi	r24, 0x05	; 5
 220:	8a 95       	dec	r24
 222:	f1 f7       	brne	.-4      	; 0x220 <readHC_SR04+0x4>
 224:	00 00       	nop
	_delay_us(2);

	// 10 microseconds high
	PORTA = SetBit(PORTA, 0, 1);
 226:	10 9a       	sbi	0x02, 0	; 2
 228:	8a e1       	ldi	r24, 0x1A	; 26
 22a:	8a 95       	dec	r24
 22c:	f1 f7       	brne	.-4      	; 0x22a <readHC_SR04+0xe>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <readHC_SR04+0x14>
	_delay_us(10);
	PORTA = SetBit(PORTA, 0, 0);
 230:	10 98       	cbi	0x02, 0	; 2
	
	while (!(PINA & 0x02)) {}
 232:	01 9b       	sbis	0x00, 1	; 0
 234:	fe cf       	rjmp	.-4      	; 0x232 <readHC_SR04+0x16>
		
	while (PINA & 0x02) {duration++;}
 236:	01 9b       	sbis	0x00, 1	; 0
 238:	0b c0       	rjmp	.+22     	; 0x250 <readHC_SR04+0x34>
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	70 e0       	ldi	r23, 0x00	; 0
 23e:	cb 01       	movw	r24, r22
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	40 e8       	ldi	r20, 0x80	; 128
 246:	5f e3       	ldi	r21, 0x3F	; 63
 248:	82 d0       	rcall	.+260    	; 0x34e <__addsf3>
 24a:	01 99       	sbic	0x00, 1	; 0
 24c:	f9 cf       	rjmp	.-14     	; 0x240 <readHC_SR04+0x24>
 24e:	08 95       	ret
 250:	60 e0       	ldi	r22, 0x00	; 0
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	cb 01       	movw	r24, r22
	
	double distance = duration * 0.034/2.0;
	
	return duration;
}
 256:	08 95       	ret

00000258 <map>:
#include "bit.h"

// xxxx   xx  xx
// column led color
unsigned char map(double x, double y, double z) {
 258:	cf 92       	push	r12
 25a:	df 92       	push	r13
 25c:	ef 92       	push	r14
 25e:	ff 92       	push	r15
 260:	0f 93       	push	r16
 262:	1f 93       	push	r17
 264:	cf 93       	push	r28
 266:	67 01       	movw	r12, r14
 268:	78 01       	movw	r14, r16
	unsigned char val = 0x02;
	
	// Determine the z axis
	// 60 - 12
	unsigned char currLED = 0x00;
	if (z >= 48)
 26a:	20 e0       	ldi	r18, 0x00	; 0
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	40 e4       	ldi	r20, 0x40	; 64
 270:	52 e4       	ldi	r21, 0x42	; 66
 272:	c7 01       	movw	r24, r14
 274:	b6 01       	movw	r22, r12
 276:	48 d1       	rcall	.+656    	; 0x508 <__gesf2>
 278:	88 23       	and	r24, r24
 27a:	14 f0       	brlt	.+4      	; 0x280 <map+0x28>
		currLED = 3;
 27c:	c3 e0       	ldi	r28, 0x03	; 3
 27e:	01 c0       	rjmp	.+2      	; 0x282 <map+0x2a>
unsigned char map(double x, double y, double z) {
	unsigned char val = 0x02;
	
	// Determine the z axis
	// 60 - 12
	unsigned char currLED = 0x00;
 280:	c0 e0       	ldi	r28, 0x00	; 0
	if (z >= 48)
		currLED = 3;
		
	if (z < 48 && z >= 36)
 282:	20 e0       	ldi	r18, 0x00	; 0
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	40 e4       	ldi	r20, 0x40	; 64
 288:	52 e4       	ldi	r21, 0x42	; 66
 28a:	c7 01       	movw	r24, r14
 28c:	b6 01       	movw	r22, r12
 28e:	c3 d0       	rcall	.+390    	; 0x416 <__cmpsf2>
 290:	88 23       	and	r24, r24
 292:	54 f4       	brge	.+20     	; 0x2a8 <map+0x50>
 294:	20 e0       	ldi	r18, 0x00	; 0
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	40 e1       	ldi	r20, 0x10	; 16
 29a:	52 e4       	ldi	r21, 0x42	; 66
 29c:	c7 01       	movw	r24, r14
 29e:	b6 01       	movw	r22, r12
 2a0:	33 d1       	rcall	.+614    	; 0x508 <__gesf2>
 2a2:	88 23       	and	r24, r24
 2a4:	0c f0       	brlt	.+2      	; 0x2a8 <map+0x50>
		currLED = 2;
 2a6:	c2 e0       	ldi	r28, 0x02	; 2
		
	if (z < 36 && z >= 24)
 2a8:	20 e0       	ldi	r18, 0x00	; 0
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	40 e1       	ldi	r20, 0x10	; 16
 2ae:	52 e4       	ldi	r21, 0x42	; 66
 2b0:	c7 01       	movw	r24, r14
 2b2:	b6 01       	movw	r22, r12
 2b4:	b0 d0       	rcall	.+352    	; 0x416 <__cmpsf2>
 2b6:	88 23       	and	r24, r24
 2b8:	54 f4       	brge	.+20     	; 0x2ce <map+0x76>
 2ba:	20 e0       	ldi	r18, 0x00	; 0
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	40 ec       	ldi	r20, 0xC0	; 192
 2c0:	51 e4       	ldi	r21, 0x41	; 65
 2c2:	c7 01       	movw	r24, r14
 2c4:	b6 01       	movw	r22, r12
 2c6:	20 d1       	rcall	.+576    	; 0x508 <__gesf2>
 2c8:	88 23       	and	r24, r24
 2ca:	0c f0       	brlt	.+2      	; 0x2ce <map+0x76>
		currLED = 1;
 2cc:	c1 e0       	ldi	r28, 0x01	; 1
		
	if (z < 24)
 2ce:	20 e0       	ldi	r18, 0x00	; 0
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	40 ec       	ldi	r20, 0xC0	; 192
 2d4:	51 e4       	ldi	r21, 0x41	; 65
 2d6:	c7 01       	movw	r24, r14
 2d8:	b6 01       	movw	r22, r12
 2da:	9d d0       	rcall	.+314    	; 0x416 <__cmpsf2>
 2dc:	88 23       	and	r24, r24
 2de:	54 f0       	brlt	.+20     	; 0x2f4 <map+0x9c>
//Functionality - Gets bit from a PINx
//Parameter: Takes in a uChar for a PINx and the pin number
//Returns: The value of the PINx
unsigned char GetBit(unsigned char port, unsigned char number) 
{
	return ( port & (0x01 << number) );
 2e0:	9c 2f       	mov	r25, r28
//Functionality - Sets bit on a PORTx
//Parameter: Takes in a uChar for a PORTx, the pin number and the binary value 
//Returns: The new value of the PORTx
unsigned char SetBit(unsigned char pin, unsigned char number, unsigned char bin_value) 
{
	return (bin_value ? pin | (0x01 << number) : pin & ~(0x01 << number));
 2e2:	c2 70       	andi	r28, 0x02	; 2
 2e4:	11 f4       	brne	.+4      	; 0x2ea <map+0x92>
 2e6:	82 e0       	ldi	r24, 0x02	; 2
 2e8:	01 c0       	rjmp	.+2      	; 0x2ec <map+0x94>
 2ea:	8a e0       	ldi	r24, 0x0A	; 10
 2ec:	90 ff       	sbrs	r25, 0
 2ee:	03 c0       	rjmp	.+6      	; 0x2f6 <map+0x9e>
 2f0:	84 60       	ori	r24, 0x04	; 4
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <map+0xa0>
 2f4:	82 e0       	ldi	r24, 0x02	; 2
 2f6:	8b 7f       	andi	r24, 0xFB	; 251
		
	val = SetBit(val, 3, GetBit(currLED, 1));
	val = SetBit(val, 2, GetBit(currLED, 0));
	
	return val;
 2f8:	cf 91       	pop	r28
 2fa:	1f 91       	pop	r17
 2fc:	0f 91       	pop	r16
 2fe:	ff 90       	pop	r15
 300:	ef 90       	pop	r14
 302:	df 90       	pop	r13
 304:	cf 90       	pop	r12
 306:	08 95       	ret

00000308 <main>:
#include "hc_sr04.h"
#include "mapper.h"

int main(void)
{
	initUSART(0); // initializes USART0
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	4f df       	rcall	.-354    	; 0x1aa <initUSART>
	initUSART(1); // initializes USART1
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	4d df       	rcall	.-358    	; 0x1aa <initUSART>
    /* Replace with your application code */
	
	// One second period
	TimerSet(10);
 310:	6a e0       	ldi	r22, 0x0A	; 10
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 318:	d7 de       	rcall	.-594    	; 0xc8 <TimerSet>
 31a:	e7 de       	rcall	.-562    	; 0xea <TimerOn>
	
	initHC_SR04();
 31c:	7a df       	rcall	.-268    	; 0x212 <initHC_SR04>
 31e:	c0 ec       	ldi	r28, 0xC0	; 192
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 320:	d0 e0       	ldi	r29, 0x00	; 0

	while (1) 
    {
		while(!TimerFlag) {}
 322:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <TimerFlag>
 326:	88 23       	and	r24, r24
 328:	e1 f3       	breq	.-8      	; 0x322 <main+0x1a>
		double z = readHC_SR04();
 32a:	78 df       	rcall	.-272    	; 0x21c <readHC_SR04>
 32c:	28 81       	ld	r18, Y
 32e:	25 ff       	sbrs	r18, 5
		if ( USART_IsSendReady(0) ) {
 330:	0a c0       	rjmp	.+20     	; 0x346 <main+0x3e>
 332:	7b 01       	movw	r14, r22
			USART_Send(map(0, 0, z), 0);
 334:	8c 01       	movw	r16, r24
 336:	20 e0       	ldi	r18, 0x00	; 0
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	a9 01       	movw	r20, r18
 33c:	ca 01       	movw	r24, r20
 33e:	b9 01       	movw	r22, r18
 340:	8b df       	rcall	.-234    	; 0x258 <map>
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	54 df       	rcall	.-344    	; 0x1ee <USART_Send>
 346:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <TimerFlag>
		}
		TimerFlag = 0;
 34a:	eb cf       	rjmp	.-42     	; 0x322 <main+0x1a>

0000034c <__subsf3>:

    }
 34c:	50 58       	subi	r21, 0x80	; 128

0000034e <__addsf3>:
 34e:	bb 27       	eor	r27, r27
 350:	aa 27       	eor	r26, r26
 352:	0e d0       	rcall	.+28     	; 0x370 <__addsf3x>
 354:	9f c0       	rjmp	.+318    	; 0x494 <__fp_round>
 356:	90 d0       	rcall	.+288    	; 0x478 <__fp_pscA>
 358:	30 f0       	brcs	.+12     	; 0x366 <__addsf3+0x18>
 35a:	95 d0       	rcall	.+298    	; 0x486 <__fp_pscB>
 35c:	20 f0       	brcs	.+8      	; 0x366 <__addsf3+0x18>
 35e:	31 f4       	brne	.+12     	; 0x36c <__addsf3+0x1e>
 360:	9f 3f       	cpi	r25, 0xFF	; 255
 362:	11 f4       	brne	.+4      	; 0x368 <__addsf3+0x1a>
 364:	1e f4       	brtc	.+6      	; 0x36c <__addsf3+0x1e>
 366:	85 c0       	rjmp	.+266    	; 0x472 <__fp_nan>
 368:	0e f4       	brtc	.+2      	; 0x36c <__addsf3+0x1e>
 36a:	e0 95       	com	r30
 36c:	e7 fb       	bst	r30, 7
 36e:	7b c0       	rjmp	.+246    	; 0x466 <__fp_inf>

00000370 <__addsf3x>:
 370:	e9 2f       	mov	r30, r25
 372:	a1 d0       	rcall	.+322    	; 0x4b6 <__fp_split3>
 374:	80 f3       	brcs	.-32     	; 0x356 <__addsf3+0x8>
 376:	ba 17       	cp	r27, r26
 378:	62 07       	cpc	r22, r18
 37a:	73 07       	cpc	r23, r19
 37c:	84 07       	cpc	r24, r20
 37e:	95 07       	cpc	r25, r21
 380:	18 f0       	brcs	.+6      	; 0x388 <__addsf3x+0x18>
 382:	71 f4       	brne	.+28     	; 0x3a0 <__addsf3x+0x30>
 384:	9e f5       	brtc	.+102    	; 0x3ec <__addsf3x+0x7c>
 386:	b9 c0       	rjmp	.+370    	; 0x4fa <__fp_zero>
 388:	0e f4       	brtc	.+2      	; 0x38c <__addsf3x+0x1c>
 38a:	e0 95       	com	r30
 38c:	0b 2e       	mov	r0, r27
 38e:	ba 2f       	mov	r27, r26
 390:	a0 2d       	mov	r26, r0
 392:	0b 01       	movw	r0, r22
 394:	b9 01       	movw	r22, r18
 396:	90 01       	movw	r18, r0
 398:	0c 01       	movw	r0, r24
 39a:	ca 01       	movw	r24, r20
 39c:	a0 01       	movw	r20, r0
 39e:	11 24       	eor	r1, r1
 3a0:	ff 27       	eor	r31, r31
 3a2:	59 1b       	sub	r21, r25
 3a4:	99 f0       	breq	.+38     	; 0x3cc <__addsf3x+0x5c>
 3a6:	59 3f       	cpi	r21, 0xF9	; 249
 3a8:	50 f4       	brcc	.+20     	; 0x3be <__addsf3x+0x4e>
 3aa:	50 3e       	cpi	r21, 0xE0	; 224
 3ac:	68 f1       	brcs	.+90     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3ae:	1a 16       	cp	r1, r26
 3b0:	f0 40       	sbci	r31, 0x00	; 0
 3b2:	a2 2f       	mov	r26, r18
 3b4:	23 2f       	mov	r18, r19
 3b6:	34 2f       	mov	r19, r20
 3b8:	44 27       	eor	r20, r20
 3ba:	58 5f       	subi	r21, 0xF8	; 248
 3bc:	f3 cf       	rjmp	.-26     	; 0x3a4 <__addsf3x+0x34>
 3be:	46 95       	lsr	r20
 3c0:	37 95       	ror	r19
 3c2:	27 95       	ror	r18
 3c4:	a7 95       	ror	r26
 3c6:	f0 40       	sbci	r31, 0x00	; 0
 3c8:	53 95       	inc	r21
 3ca:	c9 f7       	brne	.-14     	; 0x3be <__addsf3x+0x4e>
 3cc:	7e f4       	brtc	.+30     	; 0x3ec <__addsf3x+0x7c>
 3ce:	1f 16       	cp	r1, r31
 3d0:	ba 0b       	sbc	r27, r26
 3d2:	62 0b       	sbc	r22, r18
 3d4:	73 0b       	sbc	r23, r19
 3d6:	84 0b       	sbc	r24, r20
 3d8:	ba f0       	brmi	.+46     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3da:	91 50       	subi	r25, 0x01	; 1
 3dc:	a1 f0       	breq	.+40     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3de:	ff 0f       	add	r31, r31
 3e0:	bb 1f       	adc	r27, r27
 3e2:	66 1f       	adc	r22, r22
 3e4:	77 1f       	adc	r23, r23
 3e6:	88 1f       	adc	r24, r24
 3e8:	c2 f7       	brpl	.-16     	; 0x3da <__addsf3x+0x6a>
 3ea:	0e c0       	rjmp	.+28     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3ec:	ba 0f       	add	r27, r26
 3ee:	62 1f       	adc	r22, r18
 3f0:	73 1f       	adc	r23, r19
 3f2:	84 1f       	adc	r24, r20
 3f4:	48 f4       	brcc	.+18     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3f6:	87 95       	ror	r24
 3f8:	77 95       	ror	r23
 3fa:	67 95       	ror	r22
 3fc:	b7 95       	ror	r27
 3fe:	f7 95       	ror	r31
 400:	9e 3f       	cpi	r25, 0xFE	; 254
 402:	08 f0       	brcs	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 404:	b3 cf       	rjmp	.-154    	; 0x36c <__addsf3+0x1e>
 406:	93 95       	inc	r25
 408:	88 0f       	add	r24, r24
 40a:	08 f0       	brcs	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40c:	99 27       	eor	r25, r25
 40e:	ee 0f       	add	r30, r30
 410:	97 95       	ror	r25
 412:	87 95       	ror	r24
 414:	08 95       	ret

00000416 <__cmpsf2>:
 416:	03 d0       	rcall	.+6      	; 0x41e <__fp_cmp>
 418:	08 f4       	brcc	.+2      	; 0x41c <__cmpsf2+0x6>
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	08 95       	ret

0000041e <__fp_cmp>:
 41e:	99 0f       	add	r25, r25
 420:	00 08       	sbc	r0, r0
 422:	55 0f       	add	r21, r21
 424:	aa 0b       	sbc	r26, r26
 426:	e0 e8       	ldi	r30, 0x80	; 128
 428:	fe ef       	ldi	r31, 0xFE	; 254
 42a:	16 16       	cp	r1, r22
 42c:	17 06       	cpc	r1, r23
 42e:	e8 07       	cpc	r30, r24
 430:	f9 07       	cpc	r31, r25
 432:	c0 f0       	brcs	.+48     	; 0x464 <__fp_cmp+0x46>
 434:	12 16       	cp	r1, r18
 436:	13 06       	cpc	r1, r19
 438:	e4 07       	cpc	r30, r20
 43a:	f5 07       	cpc	r31, r21
 43c:	98 f0       	brcs	.+38     	; 0x464 <__fp_cmp+0x46>
 43e:	62 1b       	sub	r22, r18
 440:	73 0b       	sbc	r23, r19
 442:	84 0b       	sbc	r24, r20
 444:	95 0b       	sbc	r25, r21
 446:	39 f4       	brne	.+14     	; 0x456 <__fp_cmp+0x38>
 448:	0a 26       	eor	r0, r26
 44a:	61 f0       	breq	.+24     	; 0x464 <__fp_cmp+0x46>
 44c:	23 2b       	or	r18, r19
 44e:	24 2b       	or	r18, r20
 450:	25 2b       	or	r18, r21
 452:	21 f4       	brne	.+8      	; 0x45c <__fp_cmp+0x3e>
 454:	08 95       	ret
 456:	0a 26       	eor	r0, r26
 458:	09 f4       	brne	.+2      	; 0x45c <__fp_cmp+0x3e>
 45a:	a1 40       	sbci	r26, 0x01	; 1
 45c:	a6 95       	lsr	r26
 45e:	8f ef       	ldi	r24, 0xFF	; 255
 460:	81 1d       	adc	r24, r1
 462:	81 1d       	adc	r24, r1
 464:	08 95       	ret

00000466 <__fp_inf>:
 466:	97 f9       	bld	r25, 7
 468:	9f 67       	ori	r25, 0x7F	; 127
 46a:	80 e8       	ldi	r24, 0x80	; 128
 46c:	70 e0       	ldi	r23, 0x00	; 0
 46e:	60 e0       	ldi	r22, 0x00	; 0
 470:	08 95       	ret

00000472 <__fp_nan>:
 472:	9f ef       	ldi	r25, 0xFF	; 255
 474:	80 ec       	ldi	r24, 0xC0	; 192
 476:	08 95       	ret

00000478 <__fp_pscA>:
 478:	00 24       	eor	r0, r0
 47a:	0a 94       	dec	r0
 47c:	16 16       	cp	r1, r22
 47e:	17 06       	cpc	r1, r23
 480:	18 06       	cpc	r1, r24
 482:	09 06       	cpc	r0, r25
 484:	08 95       	ret

00000486 <__fp_pscB>:
 486:	00 24       	eor	r0, r0
 488:	0a 94       	dec	r0
 48a:	12 16       	cp	r1, r18
 48c:	13 06       	cpc	r1, r19
 48e:	14 06       	cpc	r1, r20
 490:	05 06       	cpc	r0, r21
 492:	08 95       	ret

00000494 <__fp_round>:
 494:	09 2e       	mov	r0, r25
 496:	03 94       	inc	r0
 498:	00 0c       	add	r0, r0
 49a:	11 f4       	brne	.+4      	; 0x4a0 <__fp_round+0xc>
 49c:	88 23       	and	r24, r24
 49e:	52 f0       	brmi	.+20     	; 0x4b4 <__fp_round+0x20>
 4a0:	bb 0f       	add	r27, r27
 4a2:	40 f4       	brcc	.+16     	; 0x4b4 <__fp_round+0x20>
 4a4:	bf 2b       	or	r27, r31
 4a6:	11 f4       	brne	.+4      	; 0x4ac <__fp_round+0x18>
 4a8:	60 ff       	sbrs	r22, 0
 4aa:	04 c0       	rjmp	.+8      	; 0x4b4 <__fp_round+0x20>
 4ac:	6f 5f       	subi	r22, 0xFF	; 255
 4ae:	7f 4f       	sbci	r23, 0xFF	; 255
 4b0:	8f 4f       	sbci	r24, 0xFF	; 255
 4b2:	9f 4f       	sbci	r25, 0xFF	; 255
 4b4:	08 95       	ret

000004b6 <__fp_split3>:
 4b6:	57 fd       	sbrc	r21, 7
 4b8:	90 58       	subi	r25, 0x80	; 128
 4ba:	44 0f       	add	r20, r20
 4bc:	55 1f       	adc	r21, r21
 4be:	59 f0       	breq	.+22     	; 0x4d6 <__fp_splitA+0x10>
 4c0:	5f 3f       	cpi	r21, 0xFF	; 255
 4c2:	71 f0       	breq	.+28     	; 0x4e0 <__fp_splitA+0x1a>
 4c4:	47 95       	ror	r20

000004c6 <__fp_splitA>:
 4c6:	88 0f       	add	r24, r24
 4c8:	97 fb       	bst	r25, 7
 4ca:	99 1f       	adc	r25, r25
 4cc:	61 f0       	breq	.+24     	; 0x4e6 <__fp_splitA+0x20>
 4ce:	9f 3f       	cpi	r25, 0xFF	; 255
 4d0:	79 f0       	breq	.+30     	; 0x4f0 <__fp_splitA+0x2a>
 4d2:	87 95       	ror	r24
 4d4:	08 95       	ret
 4d6:	12 16       	cp	r1, r18
 4d8:	13 06       	cpc	r1, r19
 4da:	14 06       	cpc	r1, r20
 4dc:	55 1f       	adc	r21, r21
 4de:	f2 cf       	rjmp	.-28     	; 0x4c4 <__fp_split3+0xe>
 4e0:	46 95       	lsr	r20
 4e2:	f1 df       	rcall	.-30     	; 0x4c6 <__fp_splitA>
 4e4:	08 c0       	rjmp	.+16     	; 0x4f6 <__fp_splitA+0x30>
 4e6:	16 16       	cp	r1, r22
 4e8:	17 06       	cpc	r1, r23
 4ea:	18 06       	cpc	r1, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	f1 cf       	rjmp	.-30     	; 0x4d2 <__fp_splitA+0xc>
 4f0:	86 95       	lsr	r24
 4f2:	71 05       	cpc	r23, r1
 4f4:	61 05       	cpc	r22, r1
 4f6:	08 94       	sec
 4f8:	08 95       	ret

000004fa <__fp_zero>:
 4fa:	e8 94       	clt

000004fc <__fp_szero>:
 4fc:	bb 27       	eor	r27, r27
 4fe:	66 27       	eor	r22, r22
 500:	77 27       	eor	r23, r23
 502:	cb 01       	movw	r24, r22
 504:	97 f9       	bld	r25, 7
 506:	08 95       	ret

00000508 <__gesf2>:
 508:	8a df       	rcall	.-236    	; 0x41e <__fp_cmp>
 50a:	08 f4       	brcc	.+2      	; 0x50e <__gesf2+0x6>
 50c:	8f ef       	ldi	r24, 0xFF	; 255
 50e:	08 95       	ret

00000510 <_exit>:
 510:	f8 94       	cli

00000512 <__stop_program>:
 512:	ff cf       	rjmp	.-2      	; 0x512 <__stop_program>
