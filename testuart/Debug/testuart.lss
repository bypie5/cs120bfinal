
testuart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000458  000004ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000458  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800104  00800104  000004f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000520  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f96  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a00  00000000  00000000  000015de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000907  00000000  00000000  00001fde  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  000028e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e5  00000000  00000000  00002ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006d8  00000000  00000000  000030c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000037a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e5       	ldi	r30, 0x58	; 88
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 30       	cpi	r26, 0x09	; 9
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ca d0       	rcall	.+404    	; 0x258 <main>
  c4:	c7 c1       	rjmp	.+910    	; 0x454 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
		return UDR1;
	}
}
  c8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
  cc:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
  d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
  d4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
  d8:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
  dc:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
  e0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
  e4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 10e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 112:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 116:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 11a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 11e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 122:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 126:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 148:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 14c:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 150:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 15e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 162:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 166:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <TimerFlag>
 178:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 17c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 180:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 184:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 188:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 18c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 190:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 194:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <initUSART>:
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	81 f0       	breq	.+32     	; 0x1ce <initUSART+0x24>
 1ae:	e1 ec       	ldi	r30, 0xC1	; 193
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	88 61       	ori	r24, 0x18	; 24
 1b6:	80 83       	st	Z, r24
 1b8:	e2 ec       	ldi	r30, 0xC2	; 194
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	86 60       	ori	r24, 0x06	; 6
 1c0:	80 83       	st	Z, r24
 1c2:	83 e3       	ldi	r24, 0x33	; 51
 1c4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 1c8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1cc:	08 95       	ret
 1ce:	e9 ec       	ldi	r30, 0xC9	; 201
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	88 61       	ori	r24, 0x18	; 24
 1d6:	80 83       	st	Z, r24
 1d8:	ea ec       	ldi	r30, 0xCA	; 202
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	86 60       	ori	r24, 0x06	; 6
 1e0:	80 83       	st	Z, r24
 1e2:	83 e3       	ldi	r24, 0x33	; 51
 1e4:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 1e8:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 1ec:	08 95       	ret

000001ee <USART_Send>:
 1ee:	61 30       	cpi	r22, 0x01	; 1
 1f0:	41 f0       	breq	.+16     	; 0x202 <USART_Send+0x14>
 1f2:	e0 ec       	ldi	r30, 0xC0	; 192
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	90 81       	ld	r25, Z
 1f8:	95 ff       	sbrs	r25, 5
 1fa:	fd cf       	rjmp	.-6      	; 0x1f6 <USART_Send+0x8>
 1fc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 200:	08 95       	ret
 202:	e8 ec       	ldi	r30, 0xC8	; 200
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	90 81       	ld	r25, Z
 208:	95 ff       	sbrs	r25, 5
 20a:	fd cf       	rjmp	.-6      	; 0x206 <USART_Send+0x18>
 20c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 210:	08 95       	ret

00000212 <initHC_SR04>:
	Trigger Pin A0 -> OUTPUT
	Echo Pin A1 -> INPUT
	0 0 0 0 0 0 E T
	x x x x x x 0 1 : DDRx
	*/
	DDRA = 0x01; PORTA = 0x02;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	81 b9       	out	0x01, r24	; 1
 216:	82 e0       	ldi	r24, 0x02	; 2
 218:	82 b9       	out	0x02, r24	; 2
 21a:	08 95       	ret

0000021c <readHC_SR04>:


double readHC_SR04() {
	double duration = 0;
	
	PORTA = SetBit(PORTA, 0, 0);
 21c:	10 98       	cbi	0x02, 0	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21e:	85 e0       	ldi	r24, 0x05	; 5
 220:	8a 95       	dec	r24
 222:	f1 f7       	brne	.-4      	; 0x220 <readHC_SR04+0x4>
 224:	00 00       	nop
	_delay_us(2);

	// 10 microseconds high
	PORTA = SetBit(PORTA, 0, 1);
 226:	10 9a       	sbi	0x02, 0	; 2
 228:	8a e1       	ldi	r24, 0x1A	; 26
 22a:	8a 95       	dec	r24
 22c:	f1 f7       	brne	.-4      	; 0x22a <readHC_SR04+0xe>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <readHC_SR04+0x14>
	_delay_us(10);
	PORTA = SetBit(PORTA, 0, 0);
 230:	10 98       	cbi	0x02, 0	; 2
	// Wait for pulse to start
	//while(GetBit(PINA, 1) != 1) {}
	
	//while (PINA & 0x02) {duration++;}
	
	while (!(PINA & 0x02)) {}
 232:	01 9b       	sbis	0x00, 1	; 0
 234:	fe cf       	rjmp	.-4      	; 0x232 <readHC_SR04+0x16>
		
	while (PINA & 0x02) {duration++;}
 236:	01 9b       	sbis	0x00, 1	; 0
 238:	0b c0       	rjmp	.+22     	; 0x250 <readHC_SR04+0x34>
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	70 e0       	ldi	r23, 0x00	; 0
 23e:	cb 01       	movw	r24, r22
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	40 e8       	ldi	r20, 0x80	; 128
 246:	5f e3       	ldi	r21, 0x3F	; 63
 248:	24 d0       	rcall	.+72     	; 0x292 <__addsf3>
 24a:	01 99       	sbic	0x00, 1	; 0
 24c:	f9 cf       	rjmp	.-14     	; 0x240 <readHC_SR04+0x24>
 24e:	08 95       	ret
 250:	60 e0       	ldi	r22, 0x00	; 0
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	cb 01       	movw	r24, r22
	
	double distance = duration * 0.034/2.0;
	
	return duration;
}
 256:	08 95       	ret

00000258 <main>:
#include "usart.h"
#include "hc_sr04.h"

int main(void)
{
	initUSART(0); // initializes USART0
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	a7 df       	rcall	.-178    	; 0x1aa <initUSART>
	initUSART(1); // initializes USART1
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	a5 df       	rcall	.-182    	; 0x1aa <initUSART>
    /* Replace with your application code */
	
	// One second period
	TimerSet(1000);
 260:	68 ee       	ldi	r22, 0xE8	; 232
 262:	73 e0       	ldi	r23, 0x03	; 3
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 268:	2f df       	rcall	.-418    	; 0xc8 <TimerSet>
 26a:	3f df       	rcall	.-386    	; 0xea <TimerOn>
	
	initHC_SR04();
 26c:	d2 df       	rcall	.-92     	; 0x212 <initHC_SR04>
 26e:	c0 ec       	ldi	r28, 0xC0	; 192
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 270:	d0 e0       	ldi	r29, 0x00	; 0

	while (1) 
    {
		while(!TimerFlag) {}
 272:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <TimerFlag>
 276:	88 23       	and	r24, r24
		double dist = readHC_SR04();
 278:	e1 f3       	breq	.-8      	; 0x272 <main+0x1a>
 27a:	d0 df       	rcall	.-96     	; 0x21c <readHC_SR04>
		if ( USART_IsSendReady(0) ) {
 27c:	28 81       	ld	r18, Y
 27e:	25 ff       	sbrs	r18, 5
			USART_Send(dist, 0);
 280:	04 c0       	rjmp	.+8      	; 0x28a <main+0x32>
 282:	6b d0       	rcall	.+214    	; 0x35a <__fixunssfsi>
 284:	86 2f       	mov	r24, r22
 286:	60 e0       	ldi	r22, 0x00	; 0
 288:	b2 df       	rcall	.-156    	; 0x1ee <USART_Send>
 28a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <TimerFlag>
		}
		TimerFlag = 0;
 28e:	f1 cf       	rjmp	.-30     	; 0x272 <main+0x1a>

00000290 <__subsf3>:

    }
 290:	50 58       	subi	r21, 0x80	; 128

00000292 <__addsf3>:
 292:	bb 27       	eor	r27, r27
 294:	aa 27       	eor	r26, r26
 296:	0e d0       	rcall	.+28     	; 0x2b4 <__addsf3x>
 298:	a3 c0       	rjmp	.+326    	; 0x3e0 <__fp_round>
 29a:	94 d0       	rcall	.+296    	; 0x3c4 <__fp_pscA>
 29c:	30 f0       	brcs	.+12     	; 0x2aa <__addsf3+0x18>
 29e:	99 d0       	rcall	.+306    	; 0x3d2 <__fp_pscB>
 2a0:	20 f0       	brcs	.+8      	; 0x2aa <__addsf3+0x18>
 2a2:	31 f4       	brne	.+12     	; 0x2b0 <__addsf3+0x1e>
 2a4:	9f 3f       	cpi	r25, 0xFF	; 255
 2a6:	11 f4       	brne	.+4      	; 0x2ac <__addsf3+0x1a>
 2a8:	1e f4       	brtc	.+6      	; 0x2b0 <__addsf3+0x1e>
 2aa:	89 c0       	rjmp	.+274    	; 0x3be <__fp_nan>
 2ac:	0e f4       	brtc	.+2      	; 0x2b0 <__addsf3+0x1e>
 2ae:	e0 95       	com	r30
 2b0:	e7 fb       	bst	r30, 7
 2b2:	7f c0       	rjmp	.+254    	; 0x3b2 <__fp_inf>

000002b4 <__addsf3x>:
 2b4:	e9 2f       	mov	r30, r25
 2b6:	a5 d0       	rcall	.+330    	; 0x402 <__fp_split3>
 2b8:	80 f3       	brcs	.-32     	; 0x29a <__addsf3+0x8>
 2ba:	ba 17       	cp	r27, r26
 2bc:	62 07       	cpc	r22, r18
 2be:	73 07       	cpc	r23, r19
 2c0:	84 07       	cpc	r24, r20
 2c2:	95 07       	cpc	r25, r21
 2c4:	18 f0       	brcs	.+6      	; 0x2cc <__addsf3x+0x18>
 2c6:	71 f4       	brne	.+28     	; 0x2e4 <__addsf3x+0x30>
 2c8:	9e f5       	brtc	.+102    	; 0x330 <__addsf3x+0x7c>
 2ca:	bd c0       	rjmp	.+378    	; 0x446 <__fp_zero>
 2cc:	0e f4       	brtc	.+2      	; 0x2d0 <__addsf3x+0x1c>
 2ce:	e0 95       	com	r30
 2d0:	0b 2e       	mov	r0, r27
 2d2:	ba 2f       	mov	r27, r26
 2d4:	a0 2d       	mov	r26, r0
 2d6:	0b 01       	movw	r0, r22
 2d8:	b9 01       	movw	r22, r18
 2da:	90 01       	movw	r18, r0
 2dc:	0c 01       	movw	r0, r24
 2de:	ca 01       	movw	r24, r20
 2e0:	a0 01       	movw	r20, r0
 2e2:	11 24       	eor	r1, r1
 2e4:	ff 27       	eor	r31, r31
 2e6:	59 1b       	sub	r21, r25
 2e8:	99 f0       	breq	.+38     	; 0x310 <__addsf3x+0x5c>
 2ea:	59 3f       	cpi	r21, 0xF9	; 249
 2ec:	50 f4       	brcc	.+20     	; 0x302 <__addsf3x+0x4e>
 2ee:	50 3e       	cpi	r21, 0xE0	; 224
 2f0:	68 f1       	brcs	.+90     	; 0x34c <__addsf3x+0x98>
 2f2:	1a 16       	cp	r1, r26
 2f4:	f0 40       	sbci	r31, 0x00	; 0
 2f6:	a2 2f       	mov	r26, r18
 2f8:	23 2f       	mov	r18, r19
 2fa:	34 2f       	mov	r19, r20
 2fc:	44 27       	eor	r20, r20
 2fe:	58 5f       	subi	r21, 0xF8	; 248
 300:	f3 cf       	rjmp	.-26     	; 0x2e8 <__addsf3x+0x34>
 302:	46 95       	lsr	r20
 304:	37 95       	ror	r19
 306:	27 95       	ror	r18
 308:	a7 95       	ror	r26
 30a:	f0 40       	sbci	r31, 0x00	; 0
 30c:	53 95       	inc	r21
 30e:	c9 f7       	brne	.-14     	; 0x302 <__addsf3x+0x4e>
 310:	7e f4       	brtc	.+30     	; 0x330 <__addsf3x+0x7c>
 312:	1f 16       	cp	r1, r31
 314:	ba 0b       	sbc	r27, r26
 316:	62 0b       	sbc	r22, r18
 318:	73 0b       	sbc	r23, r19
 31a:	84 0b       	sbc	r24, r20
 31c:	ba f0       	brmi	.+46     	; 0x34c <__addsf3x+0x98>
 31e:	91 50       	subi	r25, 0x01	; 1
 320:	a1 f0       	breq	.+40     	; 0x34a <__addsf3x+0x96>
 322:	ff 0f       	add	r31, r31
 324:	bb 1f       	adc	r27, r27
 326:	66 1f       	adc	r22, r22
 328:	77 1f       	adc	r23, r23
 32a:	88 1f       	adc	r24, r24
 32c:	c2 f7       	brpl	.-16     	; 0x31e <__addsf3x+0x6a>
 32e:	0e c0       	rjmp	.+28     	; 0x34c <__addsf3x+0x98>
 330:	ba 0f       	add	r27, r26
 332:	62 1f       	adc	r22, r18
 334:	73 1f       	adc	r23, r19
 336:	84 1f       	adc	r24, r20
 338:	48 f4       	brcc	.+18     	; 0x34c <__addsf3x+0x98>
 33a:	87 95       	ror	r24
 33c:	77 95       	ror	r23
 33e:	67 95       	ror	r22
 340:	b7 95       	ror	r27
 342:	f7 95       	ror	r31
 344:	9e 3f       	cpi	r25, 0xFE	; 254
 346:	08 f0       	brcs	.+2      	; 0x34a <__addsf3x+0x96>
 348:	b3 cf       	rjmp	.-154    	; 0x2b0 <__addsf3+0x1e>
 34a:	93 95       	inc	r25
 34c:	88 0f       	add	r24, r24
 34e:	08 f0       	brcs	.+2      	; 0x352 <__addsf3x+0x9e>
 350:	99 27       	eor	r25, r25
 352:	ee 0f       	add	r30, r30
 354:	97 95       	ror	r25
 356:	87 95       	ror	r24
 358:	08 95       	ret

0000035a <__fixunssfsi>:
 35a:	5b d0       	rcall	.+182    	; 0x412 <__fp_splitA>
 35c:	88 f0       	brcs	.+34     	; 0x380 <__fixunssfsi+0x26>
 35e:	9f 57       	subi	r25, 0x7F	; 127
 360:	90 f0       	brcs	.+36     	; 0x386 <__fixunssfsi+0x2c>
 362:	b9 2f       	mov	r27, r25
 364:	99 27       	eor	r25, r25
 366:	b7 51       	subi	r27, 0x17	; 23
 368:	a0 f0       	brcs	.+40     	; 0x392 <__fixunssfsi+0x38>
 36a:	d1 f0       	breq	.+52     	; 0x3a0 <__fixunssfsi+0x46>
 36c:	66 0f       	add	r22, r22
 36e:	77 1f       	adc	r23, r23
 370:	88 1f       	adc	r24, r24
 372:	99 1f       	adc	r25, r25
 374:	1a f0       	brmi	.+6      	; 0x37c <__fixunssfsi+0x22>
 376:	ba 95       	dec	r27
 378:	c9 f7       	brne	.-14     	; 0x36c <__fixunssfsi+0x12>
 37a:	12 c0       	rjmp	.+36     	; 0x3a0 <__fixunssfsi+0x46>
 37c:	b1 30       	cpi	r27, 0x01	; 1
 37e:	81 f0       	breq	.+32     	; 0x3a0 <__fixunssfsi+0x46>
 380:	62 d0       	rcall	.+196    	; 0x446 <__fp_zero>
 382:	b1 e0       	ldi	r27, 0x01	; 1
 384:	08 95       	ret
 386:	5f c0       	rjmp	.+190    	; 0x446 <__fp_zero>
 388:	67 2f       	mov	r22, r23
 38a:	78 2f       	mov	r23, r24
 38c:	88 27       	eor	r24, r24
 38e:	b8 5f       	subi	r27, 0xF8	; 248
 390:	39 f0       	breq	.+14     	; 0x3a0 <__fixunssfsi+0x46>
 392:	b9 3f       	cpi	r27, 0xF9	; 249
 394:	cc f3       	brlt	.-14     	; 0x388 <__fixunssfsi+0x2e>
 396:	86 95       	lsr	r24
 398:	77 95       	ror	r23
 39a:	67 95       	ror	r22
 39c:	b3 95       	inc	r27
 39e:	d9 f7       	brne	.-10     	; 0x396 <__fixunssfsi+0x3c>
 3a0:	3e f4       	brtc	.+14     	; 0x3b0 <__fixunssfsi+0x56>
 3a2:	90 95       	com	r25
 3a4:	80 95       	com	r24
 3a6:	70 95       	com	r23
 3a8:	61 95       	neg	r22
 3aa:	7f 4f       	sbci	r23, 0xFF	; 255
 3ac:	8f 4f       	sbci	r24, 0xFF	; 255
 3ae:	9f 4f       	sbci	r25, 0xFF	; 255
 3b0:	08 95       	ret

000003b2 <__fp_inf>:
 3b2:	97 f9       	bld	r25, 7
 3b4:	9f 67       	ori	r25, 0x7F	; 127
 3b6:	80 e8       	ldi	r24, 0x80	; 128
 3b8:	70 e0       	ldi	r23, 0x00	; 0
 3ba:	60 e0       	ldi	r22, 0x00	; 0
 3bc:	08 95       	ret

000003be <__fp_nan>:
 3be:	9f ef       	ldi	r25, 0xFF	; 255
 3c0:	80 ec       	ldi	r24, 0xC0	; 192
 3c2:	08 95       	ret

000003c4 <__fp_pscA>:
 3c4:	00 24       	eor	r0, r0
 3c6:	0a 94       	dec	r0
 3c8:	16 16       	cp	r1, r22
 3ca:	17 06       	cpc	r1, r23
 3cc:	18 06       	cpc	r1, r24
 3ce:	09 06       	cpc	r0, r25
 3d0:	08 95       	ret

000003d2 <__fp_pscB>:
 3d2:	00 24       	eor	r0, r0
 3d4:	0a 94       	dec	r0
 3d6:	12 16       	cp	r1, r18
 3d8:	13 06       	cpc	r1, r19
 3da:	14 06       	cpc	r1, r20
 3dc:	05 06       	cpc	r0, r21
 3de:	08 95       	ret

000003e0 <__fp_round>:
 3e0:	09 2e       	mov	r0, r25
 3e2:	03 94       	inc	r0
 3e4:	00 0c       	add	r0, r0
 3e6:	11 f4       	brne	.+4      	; 0x3ec <__fp_round+0xc>
 3e8:	88 23       	and	r24, r24
 3ea:	52 f0       	brmi	.+20     	; 0x400 <__LOCK_REGION_LENGTH__>
 3ec:	bb 0f       	add	r27, r27
 3ee:	40 f4       	brcc	.+16     	; 0x400 <__LOCK_REGION_LENGTH__>
 3f0:	bf 2b       	or	r27, r31
 3f2:	11 f4       	brne	.+4      	; 0x3f8 <__fp_round+0x18>
 3f4:	60 ff       	sbrs	r22, 0
 3f6:	04 c0       	rjmp	.+8      	; 0x400 <__LOCK_REGION_LENGTH__>
 3f8:	6f 5f       	subi	r22, 0xFF	; 255
 3fa:	7f 4f       	sbci	r23, 0xFF	; 255
 3fc:	8f 4f       	sbci	r24, 0xFF	; 255
 3fe:	9f 4f       	sbci	r25, 0xFF	; 255
 400:	08 95       	ret

00000402 <__fp_split3>:
 402:	57 fd       	sbrc	r21, 7
 404:	90 58       	subi	r25, 0x80	; 128
 406:	44 0f       	add	r20, r20
 408:	55 1f       	adc	r21, r21
 40a:	59 f0       	breq	.+22     	; 0x422 <__fp_splitA+0x10>
 40c:	5f 3f       	cpi	r21, 0xFF	; 255
 40e:	71 f0       	breq	.+28     	; 0x42c <__fp_splitA+0x1a>
 410:	47 95       	ror	r20

00000412 <__fp_splitA>:
 412:	88 0f       	add	r24, r24
 414:	97 fb       	bst	r25, 7
 416:	99 1f       	adc	r25, r25
 418:	61 f0       	breq	.+24     	; 0x432 <__fp_splitA+0x20>
 41a:	9f 3f       	cpi	r25, 0xFF	; 255
 41c:	79 f0       	breq	.+30     	; 0x43c <__fp_splitA+0x2a>
 41e:	87 95       	ror	r24
 420:	08 95       	ret
 422:	12 16       	cp	r1, r18
 424:	13 06       	cpc	r1, r19
 426:	14 06       	cpc	r1, r20
 428:	55 1f       	adc	r21, r21
 42a:	f2 cf       	rjmp	.-28     	; 0x410 <__fp_split3+0xe>
 42c:	46 95       	lsr	r20
 42e:	f1 df       	rcall	.-30     	; 0x412 <__fp_splitA>
 430:	08 c0       	rjmp	.+16     	; 0x442 <__fp_splitA+0x30>
 432:	16 16       	cp	r1, r22
 434:	17 06       	cpc	r1, r23
 436:	18 06       	cpc	r1, r24
 438:	99 1f       	adc	r25, r25
 43a:	f1 cf       	rjmp	.-30     	; 0x41e <__fp_splitA+0xc>
 43c:	86 95       	lsr	r24
 43e:	71 05       	cpc	r23, r1
 440:	61 05       	cpc	r22, r1
 442:	08 94       	sec
 444:	08 95       	ret

00000446 <__fp_zero>:
 446:	e8 94       	clt

00000448 <__fp_szero>:
 448:	bb 27       	eor	r27, r27
 44a:	66 27       	eor	r22, r22
 44c:	77 27       	eor	r23, r23
 44e:	cb 01       	movw	r24, r22
 450:	97 f9       	bld	r25, 7
 452:	08 95       	ret

00000454 <_exit>:
 454:	f8 94       	cli

00000456 <__stop_program>:
 456:	ff cf       	rjmp	.-2      	; 0x456 <__stop_program>
