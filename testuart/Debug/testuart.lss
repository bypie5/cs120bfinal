
testuart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000ea6  00000f3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ea6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d4  00800126  00800126  00000f60  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c99  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c29  00000000  00000000  00002de1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ed6  00000000  00000000  00003a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a8  00000000  00000000  000048e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000845  00000000  00000000  00004c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001079  00000000  00000000  000054cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00006546  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	d6 c0       	rjmp	.+428    	; 0x1e2 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ea       	ldi	r30, 0xA6	; 166
  a0:	fe e0       	ldi	r31, 0x0E	; 14
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 32       	cpi	r26, 0x26	; 38
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e2       	ldi	r26, 0x26	; 38
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 3f       	cpi	r26, 0xFA	; 250
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	6c d4       	rcall	.+2264   	; 0x99c <main>
  c4:	ee c6       	rjmp	.+3548   	; 0xea2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
		return UDR1;
	}
}
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	5e 98       	cbi	0x0b, 6	; 11
  f0:	88 b9       	out	0x08, r24	; 8
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	00 00       	nop
  f6:	5f 98       	cbi	0x0b, 7	; 11
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	5e 9a       	sbi	0x0b, 6	; 11
 136:	88 b9       	out	0x08, r24	; 8
 138:	5f 9a       	sbi	0x0b, 7	; 11
 13a:	00 00       	nop
 13c:	5f 98       	cbi	0x0b, 7	; 11
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	eb 01       	movw	r28, r22
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
 15e:	81 2f       	mov	r24, r17
 160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Cursor>
 162:	89 91       	ld	r24, Y+
 164:	e7 df       	rcall	.-50     	; 0x134 <LCD_WriteData>
 166:	10 2f       	mov	r17, r16
 168:	88 81       	ld	r24, Y
 16a:	81 11       	cpse	r24, r1
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <TimerSet>:
 178:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <_avr_timer_M>
 17c:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <_avr_timer_M+0x1>
 180:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_avr_timer_M+0x2>
 184:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <_avr_timer_M+0x3>
 188:	60 93 27 01 	sts	0x0127, r22	; 0x800127 <_avr_timer_cntcurr>
 18c:	70 93 28 01 	sts	0x0128, r23	; 0x800128 <_avr_timer_cntcurr+0x1>
 190:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <_avr_timer_cntcurr+0x2>
 194:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <_avr_timer_cntcurr+0x3>
 198:	08 95       	ret

0000019a <TimerOn>:
 19a:	8b e0       	ldi	r24, 0x0B	; 11
 19c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1a0:	8d e7       	ldi	r24, 0x7D	; 125
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1a8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1b2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1b6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1ba:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_avr_timer_M>
 1be:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_avr_timer_M+0x1>
 1c2:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <_avr_timer_M+0x2>
 1c6:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <_avr_timer_M+0x3>
 1ca:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <_avr_timer_cntcurr>
 1ce:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <_avr_timer_cntcurr+0x1>
 1d2:	a0 93 29 01 	sts	0x0129, r26	; 0x800129 <_avr_timer_cntcurr+0x2>
 1d6:	b0 93 2a 01 	sts	0x012A, r27	; 0x80012a <_avr_timer_cntcurr+0x3>
 1da:	8f b7       	in	r24, 0x3f	; 63
 1dc:	80 68       	ori	r24, 0x80	; 128
 1de:	8f bf       	out	0x3f, r24	; 63
 1e0:	08 95       	ret

000001e2 <__vector_13>:
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
 1f0:	af 93       	push	r26
 1f2:	bf 93       	push	r27
 1f4:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <_avr_timer_cntcurr>
 1f8:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <_avr_timer_cntcurr+0x1>
 1fc:	a0 91 29 01 	lds	r26, 0x0129	; 0x800129 <_avr_timer_cntcurr+0x2>
 200:	b0 91 2a 01 	lds	r27, 0x012A	; 0x80012a <_avr_timer_cntcurr+0x3>
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	a1 09       	sbc	r26, r1
 208:	b1 09       	sbc	r27, r1
 20a:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <_avr_timer_cntcurr>
 20e:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <_avr_timer_cntcurr+0x1>
 212:	a0 93 29 01 	sts	0x0129, r26	; 0x800129 <_avr_timer_cntcurr+0x2>
 216:	b0 93 2a 01 	sts	0x012A, r27	; 0x80012a <_avr_timer_cntcurr+0x3>
 21a:	89 2b       	or	r24, r25
 21c:	8a 2b       	or	r24, r26
 21e:	8b 2b       	or	r24, r27
 220:	99 f4       	brne	.+38     	; 0x248 <__vector_13+0x66>
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <TimerFlag>
 228:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_avr_timer_M>
 22c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_avr_timer_M+0x1>
 230:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <_avr_timer_M+0x2>
 234:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <_avr_timer_M+0x3>
 238:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <_avr_timer_cntcurr>
 23c:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <_avr_timer_cntcurr+0x1>
 240:	a0 93 29 01 	sts	0x0129, r26	; 0x800129 <_avr_timer_cntcurr+0x2>
 244:	b0 93 2a 01 	sts	0x012A, r27	; 0x80012a <_avr_timer_cntcurr+0x3>
 248:	bf 91       	pop	r27
 24a:	af 91       	pop	r26
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <initUSART>:
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	81 f0       	breq	.+32     	; 0x27e <initUSART+0x24>
 25e:	e1 ec       	ldi	r30, 0xC1	; 193
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	88 61       	ori	r24, 0x18	; 24
 266:	80 83       	st	Z, r24
 268:	e2 ec       	ldi	r30, 0xC2	; 194
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	86 60       	ori	r24, 0x06	; 6
 270:	80 83       	st	Z, r24
 272:	83 e3       	ldi	r24, 0x33	; 51
 274:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 278:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 27c:	08 95       	ret
 27e:	e9 ec       	ldi	r30, 0xC9	; 201
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	88 61       	ori	r24, 0x18	; 24
 286:	80 83       	st	Z, r24
 288:	ea ec       	ldi	r30, 0xCA	; 202
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	86 60       	ori	r24, 0x06	; 6
 290:	80 83       	st	Z, r24
 292:	83 e3       	ldi	r24, 0x33	; 51
 294:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 298:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 29c:	08 95       	ret

0000029e <initHC_SR04>:
	Trigger Pin A0 -> OUTPUT
	Echo Pin A1 -> INPUT
	0 0 0 0 0 0 E T
	x x x x x x 0 1 : DDRx
	*/
	DDRA = 0x55; PORTA = 0xAA;
 29e:	85 e5       	ldi	r24, 0x55	; 85
 2a0:	81 b9       	out	0x01, r24	; 1
 2a2:	8a ea       	ldi	r24, 0xAA	; 170
 2a4:	82 b9       	out	0x02, r24	; 2
 2a6:	08 95       	ret

000002a8 <readHC_SR04>:
}


double readHC_SR04(unsigned char m_trig, unsigned char m_echo) {
 2a8:	cf 93       	push	r28
	double duration = 0;
	
	PORTA = SetBit(PORTA, m_trig, 0);
 2aa:	92 b1       	in	r25, 0x02	; 2
//Functionality - Sets bit on a PORTx
//Parameter: Takes in a uChar for a PORTx, the pin number and the binary value 
//Returns: The new value of the PORTx
unsigned char SetBit(unsigned char pin, unsigned char number, unsigned char bin_value) 
{
	return (bin_value ? pin | (0x01 << number) : pin & ~(0x01 << number));
 2ac:	21 e0       	ldi	r18, 0x01	; 1
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	a9 01       	movw	r20, r18
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <readHC_SR04+0x10>
 2b4:	44 0f       	add	r20, r20
 2b6:	55 1f       	adc	r21, r21
 2b8:	8a 95       	dec	r24
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <readHC_SR04+0xc>
 2bc:	84 2f       	mov	r24, r20
 2be:	80 95       	com	r24
 2c0:	98 23       	and	r25, r24
 2c2:	92 b9       	out	0x02, r25	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c4:	95 e0       	ldi	r25, 0x05	; 5
 2c6:	9a 95       	dec	r25
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <readHC_SR04+0x1e>
 2ca:	00 00       	nop
	_delay_us(2);

	// 10 microseconds high
	PORTA = SetBit(PORTA, m_trig, 1);
 2cc:	92 b1       	in	r25, 0x02	; 2
 2ce:	49 2b       	or	r20, r25
 2d0:	42 b9       	out	0x02, r20	; 2
 2d2:	9a e1       	ldi	r25, 0x1A	; 26
 2d4:	9a 95       	dec	r25
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <readHC_SR04+0x2c>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <readHC_SR04+0x32>
	_delay_us(10);
	PORTA = SetBit(PORTA, m_trig, 0);
 2da:	92 b1       	in	r25, 0x02	; 2
 2dc:	89 23       	and	r24, r25
 2de:	82 b9       	out	0x02, r24	; 2
//Functionality - Gets bit from a PINx
//Parameter: Takes in a uChar for a PINx and the pin number
//Returns: The value of the PINx
unsigned char GetBit(unsigned char port, unsigned char number) 
{
	return ( port & (0x01 << number) );
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <readHC_SR04+0x3e>
 2e2:	22 0f       	add	r18, r18
 2e4:	33 1f       	adc	r19, r19
 2e6:	6a 95       	dec	r22
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <readHC_SR04+0x3a>
 2ea:	c2 2f       	mov	r28, r18
	
	while (!GetBit(PINA, m_echo)) {}
 2ec:	80 b1       	in	r24, 0x00	; 0
 2ee:	8c 23       	and	r24, r28
 2f0:	e9 f3       	breq	.-6      	; 0x2ec <readHC_SR04+0x44>
		
	while (GetBit(PINA, m_echo)) {duration++;}
 2f2:	80 b1       	in	r24, 0x00	; 0
 2f4:	28 23       	and	r18, r24
 2f6:	61 f0       	breq	.+24     	; 0x310 <readHC_SR04+0x68>
 2f8:	60 e0       	ldi	r22, 0x00	; 0
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	cb 01       	movw	r24, r22
 2fe:	20 e0       	ldi	r18, 0x00	; 0
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	40 e8       	ldi	r20, 0x80	; 128
 304:	5f e3       	ldi	r21, 0x3F	; 63
 306:	72 d3       	rcall	.+1764   	; 0x9ec <__addsf3>
 308:	20 b1       	in	r18, 0x00	; 0
 30a:	2c 23       	and	r18, r28
 30c:	c1 f7       	brne	.-16     	; 0x2fe <readHC_SR04+0x56>
 30e:	03 c0       	rjmp	.+6      	; 0x316 <readHC_SR04+0x6e>
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	cb 01       	movw	r24, r22
	
	double distance = duration * 0.034/2.0;
	
	return duration;
}
 316:	cf 91       	pop	r28
 318:	08 95       	ret

0000031a <map>:
#include "bit.h"

// xxxx   xx  xx
// column led color
unsigned char map(double x, double y, double z, unsigned char u_color) {
 31a:	4f 92       	push	r4
 31c:	5f 92       	push	r5
 31e:	6f 92       	push	r6
 320:	7f 92       	push	r7
 322:	8f 92       	push	r8
 324:	9f 92       	push	r9
 326:	af 92       	push	r10
 328:	bf 92       	push	r11
 32a:	cf 92       	push	r12
 32c:	ef 92       	push	r14
 32e:	ff 92       	push	r15
 330:	0f 93       	push	r16
 332:	1f 93       	push	r17
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	00 d0       	rcall	.+0      	; 0x33a <map+0x20>
 33a:	00 d0       	rcall	.+0      	; 0x33c <map+0x22>
 33c:	00 d0       	rcall	.+0      	; 0x33e <map+0x24>
 33e:	cd b7       	in	r28, 0x3d	; 61
 340:	de b7       	in	r29, 0x3e	; 62
 342:	4b 01       	movw	r8, r22
 344:	5c 01       	movw	r10, r24
 346:	29 83       	std	Y+1, r18	; 0x01
 348:	3a 83       	std	Y+2, r19	; 0x02
 34a:	4b 83       	std	Y+3, r20	; 0x03
 34c:	5c 83       	std	Y+4, r21	; 0x04
 34e:	27 01       	movw	r4, r14
 350:	38 01       	movw	r6, r16
//Functionality - Sets bit on a PORTx
//Parameter: Takes in a uChar for a PORTx, the pin number and the binary value 
//Returns: The new value of the PORTx
unsigned char SetBit(unsigned char pin, unsigned char number, unsigned char bin_value) 
{
	return (bin_value ? pin | (0x01 << number) : pin & ~(0x01 << number));
 352:	8c 2d       	mov	r24, r12
 354:	81 70       	andi	r24, 0x01	; 1
 356:	8d 83       	std	Y+5, r24	; 0x05
 358:	c1 fe       	sbrs	r12, 1
 35a:	03 c0       	rjmp	.+6      	; 0x362 <map+0x48>
 35c:	82 60       	ori	r24, 0x02	; 2
 35e:	8d 83       	std	Y+5, r24	; 0x05
 360:	03 c0       	rjmp	.+6      	; 0x368 <map+0x4e>
 362:	9d 81       	ldd	r25, Y+5	; 0x05
 364:	9d 7f       	andi	r25, 0xFD	; 253
 366:	9d 83       	std	Y+5, r25	; 0x05
	val = SetBit(val, 1, GetBit(color, 1));
	
	// Determine which column (0-3)
	unsigned char column = 0x00;
	
	if (x >= 36) {
 368:	20 e0       	ldi	r18, 0x00	; 0
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	40 e1       	ldi	r20, 0x10	; 16
 36e:	52 e4       	ldi	r21, 0x42	; 66
 370:	c5 01       	movw	r24, r10
 372:	b4 01       	movw	r22, r8
 374:	81 d4       	rcall	.+2306   	; 0xc78 <__gesf2>
 376:	88 23       	and	r24, r24
 378:	9c f0       	brlt	.+38     	; 0x3a0 <map+0x86>
		if (y >= 36) {
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	8e 83       	std	Y+6, r24	; 0x06
 37e:	20 e0       	ldi	r18, 0x00	; 0
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	40 e1       	ldi	r20, 0x10	; 16
 384:	52 e4       	ldi	r21, 0x42	; 66
 386:	69 81       	ldd	r22, Y+1	; 0x01
 388:	7a 81       	ldd	r23, Y+2	; 0x02
 38a:	8b 81       	ldd	r24, Y+3	; 0x03
 38c:	9c 81       	ldd	r25, Y+4	; 0x04
 38e:	74 d4       	rcall	.+2280   	; 0xc78 <__gesf2>
 390:	88 23       	and	r24, r24
 392:	0c f4       	brge	.+2      	; 0x396 <map+0x7c>
 394:	1e 82       	std	Y+6, r1	; 0x06
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	9e 81       	ldd	r25, Y+6	; 0x06
 39a:	89 27       	eor	r24, r25
 39c:	c1 f4       	brne	.+48     	; 0x3ce <map+0xb4>
 39e:	1b c0       	rjmp	.+54     	; 0x3d6 <map+0xbc>
			column = 0;
		} else {
			column = 1;
		}
	} else if (x < 36) {
 3a0:	20 e0       	ldi	r18, 0x00	; 0
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	40 e1       	ldi	r20, 0x10	; 16
 3a6:	52 e4       	ldi	r21, 0x42	; 66
 3a8:	c5 01       	movw	r24, r10
 3aa:	b4 01       	movw	r22, r8
 3ac:	83 d3       	rcall	.+1798   	; 0xab4 <__cmpsf2>
 3ae:	88 23       	and	r24, r24
 3b0:	0c f0       	brlt	.+2      	; 0x3b4 <map+0x9a>
 3b2:	66 c0       	rjmp	.+204    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
		if (y >= 36) {
 3b4:	20 e0       	ldi	r18, 0x00	; 0
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	40 e1       	ldi	r20, 0x10	; 16
 3ba:	52 e4       	ldi	r21, 0x42	; 66
 3bc:	69 81       	ldd	r22, Y+1	; 0x01
 3be:	7a 81       	ldd	r23, Y+2	; 0x02
 3c0:	8b 81       	ldd	r24, Y+3	; 0x03
 3c2:	9c 81       	ldd	r25, Y+4	; 0x04
 3c4:	59 d4       	rcall	.+2226   	; 0xc78 <__gesf2>
 3c6:	88 23       	and	r24, r24
 3c8:	0c f4       	brge	.+2      	; 0x3cc <map+0xb2>
 3ca:	5c c0       	rjmp	.+184    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
//Functionality - Gets bit from a PINx
//Parameter: Takes in a uChar for a PINx and the pin number
//Returns: The value of the PINx
unsigned char GetBit(unsigned char port, unsigned char number) 
{
	return ( port & (0x01 << number) );
 3cc:	83 e0       	ldi	r24, 0x03	; 3
//Functionality - Sets bit on a PORTx
//Parameter: Takes in a uChar for a PORTx, the pin number and the binary value 
//Returns: The new value of the PORTx
unsigned char SetBit(unsigned char pin, unsigned char number, unsigned char bin_value) 
{
	return (bin_value ? pin | (0x01 << number) : pin & ~(0x01 << number));
 3ce:	9d 81       	ldd	r25, Y+5	; 0x05
 3d0:	90 61       	ori	r25, 0x10	; 16
 3d2:	99 83       	std	Y+1, r25	; 0x01
 3d4:	03 c0       	rjmp	.+6      	; 0x3dc <map+0xc2>
 3d6:	9d 81       	ldd	r25, Y+5	; 0x05
 3d8:	9f 7e       	andi	r25, 0xEF	; 239
 3da:	99 83       	std	Y+1, r25	; 0x01
 3dc:	81 ff       	sbrs	r24, 1
 3de:	04 c0       	rjmp	.+8      	; 0x3e8 <map+0xce>
 3e0:	89 81       	ldd	r24, Y+1	; 0x01
 3e2:	80 62       	ori	r24, 0x20	; 32
 3e4:	89 83       	std	Y+1, r24	; 0x01
 3e6:	03 c0       	rjmp	.+6      	; 0x3ee <map+0xd4>
 3e8:	99 81       	ldd	r25, Y+1	; 0x01
 3ea:	9f 7d       	andi	r25, 0xDF	; 223
 3ec:	99 83       	std	Y+1, r25	; 0x01
	// 60 - 12
	unsigned char currLED = 0x00;
	if (z >= 48)
		currLED = 0;
		
	if (z < 48 && z >= 36)
 3ee:	20 e0       	ldi	r18, 0x00	; 0
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	40 e4       	ldi	r20, 0x40	; 64
 3f4:	52 e4       	ldi	r21, 0x42	; 66
 3f6:	c3 01       	movw	r24, r6
 3f8:	b2 01       	movw	r22, r4
 3fa:	5c d3       	rcall	.+1720   	; 0xab4 <__cmpsf2>
 3fc:	88 23       	and	r24, r24
 3fe:	6c f4       	brge	.+26     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	8d 83       	std	Y+5, r24	; 0x05
 404:	20 e0       	ldi	r18, 0x00	; 0
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	40 e1       	ldi	r20, 0x10	; 16
 40a:	52 e4       	ldi	r21, 0x42	; 66
 40c:	c3 01       	movw	r24, r6
 40e:	b2 01       	movw	r22, r4
 410:	33 d4       	rcall	.+2150   	; 0xc78 <__gesf2>
 412:	88 23       	and	r24, r24
 414:	1c f4       	brge	.+6      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 416:	1d 82       	std	Y+5, r1	; 0x05
 418:	01 c0       	rjmp	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 41a:	1d 82       	std	Y+5, r1	; 0x05
		currLED = 1;
		
	if (z < 36 && z >= 24)
 41c:	20 e0       	ldi	r18, 0x00	; 0
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	40 e1       	ldi	r20, 0x10	; 16
 422:	52 e4       	ldi	r21, 0x42	; 66
 424:	c3 01       	movw	r24, r6
 426:	b2 01       	movw	r22, r4
 428:	45 d3       	rcall	.+1674   	; 0xab4 <__cmpsf2>
 42a:	88 23       	and	r24, r24
 42c:	5c f4       	brge	.+22     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 42e:	20 e0       	ldi	r18, 0x00	; 0
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	40 ec       	ldi	r20, 0xC0	; 192
 434:	51 e4       	ldi	r21, 0x41	; 65
 436:	c3 01       	movw	r24, r6
 438:	b2 01       	movw	r22, r4
 43a:	1e d4       	rcall	.+2108   	; 0xc78 <__gesf2>
 43c:	88 23       	and	r24, r24
 43e:	14 f0       	brlt	.+4      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 440:	92 e0       	ldi	r25, 0x02	; 2
		currLED = 2;
 442:	9d 83       	std	Y+5, r25	; 0x05
		
	if (z < 24)
 444:	20 e0       	ldi	r18, 0x00	; 0
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	40 ec       	ldi	r20, 0xC0	; 192
 44a:	51 e4       	ldi	r21, 0x41	; 65
 44c:	c3 01       	movw	r24, r6
 44e:	b2 01       	movw	r22, r4
 450:	31 d3       	rcall	.+1634   	; 0xab4 <__cmpsf2>
 452:	88 23       	and	r24, r24
 454:	2c f0       	brlt	.+10     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 456:	8d 81       	ldd	r24, Y+5	; 0x05
//Functionality - Gets bit from a PINx
//Parameter: Takes in a uChar for a PINx and the pin number
//Returns: The value of the PINx
unsigned char GetBit(unsigned char port, unsigned char number) 
{
	return ( port & (0x01 << number) );
 458:	98 2f       	mov	r25, r24
//Functionality - Sets bit on a PORTx
//Parameter: Takes in a uChar for a PORTx, the pin number and the binary value 
//Returns: The new value of the PORTx
unsigned char SetBit(unsigned char pin, unsigned char number, unsigned char bin_value) 
{
	return (bin_value ? pin | (0x01 << number) : pin & ~(0x01 << number));
 45a:	92 70       	andi	r25, 0x02	; 2
 45c:	31 f0       	breq	.+12     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 45e:	01 c0       	rjmp	.+2      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 460:	83 e0       	ldi	r24, 0x03	; 3
//Functionality - Gets bit from a PINx
//Parameter: Takes in a uChar for a PINx and the pin number
//Returns: The value of the PINx
unsigned char GetBit(unsigned char port, unsigned char number) 
{
	return ( port & (0x01 << number) );
 462:	99 81       	ldd	r25, Y+1	; 0x01
//Functionality - Sets bit on a PORTx
//Parameter: Takes in a uChar for a PORTx, the pin number and the binary value 
//Returns: The new value of the PORTx
unsigned char SetBit(unsigned char pin, unsigned char number, unsigned char bin_value) 
{
	return (bin_value ? pin | (0x01 << number) : pin & ~(0x01 << number));
 464:	98 60       	ori	r25, 0x08	; 8
 466:	99 83       	std	Y+1, r25	; 0x01
 468:	03 c0       	rjmp	.+6      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 46a:	99 81       	ldd	r25, Y+1	; 0x01
 46c:	97 7f       	andi	r25, 0xF7	; 247
 46e:	99 83       	std	Y+1, r25	; 0x01
 470:	80 ff       	sbrs	r24, 0
 472:	03 c0       	rjmp	.+6      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 474:	89 81       	ldd	r24, Y+1	; 0x01
 476:	84 60       	ori	r24, 0x04	; 4
 478:	07 c0       	rjmp	.+14     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 47a:	89 81       	ldd	r24, Y+1	; 0x01
 47c:	8b 7f       	andi	r24, 0xFB	; 251
 47e:	04 c0       	rjmp	.+8      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
		currLED = 3;
		
	val = SetBit(val, 3, GetBit(currLED, 1));
	val = SetBit(val, 2, GetBit(currLED, 0));
	
	return val;
 480:	80 e0       	ldi	r24, 0x00	; 0
	
	val = SetBit(val, 0, GetBit(color, 0));
	val = SetBit(val, 1, GetBit(color, 1));
	
	// Determine which column (0-3)
	unsigned char column = 0x00;
 482:	a9 cf       	rjmp	.-174    	; 0x3d6 <map+0xbc>
 484:	82 e0       	ldi	r24, 0x02	; 2
		}
	} else if (x < 36) {
		if (y >= 36) {
			column = 3;
		} else {
			column = 2;
 486:	a7 cf       	rjmp	.-178    	; 0x3d6 <map+0xbc>
 488:	26 96       	adiw	r28, 0x06	; 6
		
	val = SetBit(val, 3, GetBit(currLED, 1));
	val = SetBit(val, 2, GetBit(currLED, 0));
	
	return val;
 48a:	0f b6       	in	r0, 0x3f	; 63
 48c:	f8 94       	cli
 48e:	de bf       	out	0x3e, r29	; 62
 490:	0f be       	out	0x3f, r0	; 63
 492:	cd bf       	out	0x3d, r28	; 61
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	1f 91       	pop	r17
 49a:	0f 91       	pop	r16
 49c:	ff 90       	pop	r15
 49e:	ef 90       	pop	r14
 4a0:	cf 90       	pop	r12
 4a2:	bf 90       	pop	r11
 4a4:	af 90       	pop	r10
 4a6:	9f 90       	pop	r9
 4a8:	8f 90       	pop	r8
 4aa:	7f 90       	pop	r7
 4ac:	6f 90       	pop	r6
 4ae:	5f 90       	pop	r5
 4b0:	4f 90       	pop	r4
 4b2:	08 95       	ret

000004b4 <transmit>:
 4b4:	af 92       	push	r10
// Helper functions
void transmit(double tx, double ty, double tz, unsigned char tc,
			 unsigned char goalLoc, unsigned char tc_g) {
 4b6:	cf 92       	push	r12
 4b8:	ef 92       	push	r14
 4ba:	ff 92       	push	r15
 4bc:	0f 93       	push	r16
 4be:	1f 93       	push	r17
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
 4c4:	cd b7       	in	r28, 0x3d	; 61
 4c6:	de b7       	in	r29, 0x3e	; 62
		unsigned char val = 0x00;
		
		unsigned char playerLoc = (map(tx, ty, tz, tc) >> 2) & 0x0F;
 4c8:	28 df       	rcall	.-432    	; 0x31a <map>
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 4ca:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
		
		val = goalLoc << 4;
		val |= playerLoc;
		if (USART_IsSendReady(0)) {
 4ce:	95 ff       	sbrs	r25, 5
 4d0:	0a c0       	rjmp	.+20     	; 0x4e6 <transmit+0x32>
			 unsigned char goalLoc, unsigned char tc_g) {
		unsigned char val = 0x00;
		
		unsigned char playerLoc = (map(tx, ty, tz, tc) >> 2) & 0x0F;
		
		val = goalLoc << 4;
 4d2:	aa 0c       	add	r10, r10
 4d4:	aa 0c       	add	r10, r10
 4d6:	aa 0c       	add	r10, r10
 4d8:	aa 0c       	add	r10, r10
		val |= playerLoc;
 4da:	86 95       	lsr	r24
 4dc:	86 95       	lsr	r24
 4de:	8f 70       	andi	r24, 0x0F	; 15
 4e0:	a8 2a       	or	r10, r24
//Returns: None
void USART_Send(unsigned char sendMe, unsigned char usartNum)
{
	if (usartNum != 1) {
		//while( !(UCSR0A & (1 << UDRE0)) );
		UDR0 = sendMe;
 4e2:	a0 92 c6 00 	sts	0x00C6, r10	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		if (USART_IsSendReady(0)) {
			USART_Send(val, 0);
		}
}
 4e6:	df 91       	pop	r29
 4e8:	cf 91       	pop	r28
 4ea:	1f 91       	pop	r17
 4ec:	0f 91       	pop	r16
 4ee:	ff 90       	pop	r15
 4f0:	ef 90       	pop	r14
 4f2:	cf 90       	pop	r12
 4f4:	af 90       	pop	r10
 4f6:	08 95       	ret

000004f8 <show>:

void show () {
	unsigned char val = rand()  % (0xFF + 1 - 0x00) + 0x00; 
 4f8:	2c d4       	rcall	.+2136   	; 0xd52 <rand>
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 4fa:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	if (USART_IsSendReady(0)) {
 4fe:	25 ff       	sbrs	r18, 5
 500:	08 c0       	rjmp	.+16     	; 0x512 <show+0x1a>
			USART_Send(val, 0);
		}
}

void show () {
	unsigned char val = rand()  % (0xFF + 1 - 0x00) + 0x00; 
 502:	90 78       	andi	r25, 0x80	; 128
 504:	99 23       	and	r25, r25
 506:	1c f4       	brge	.+6      	; 0x50e <show+0x16>
 508:	01 97       	sbiw	r24, 0x01	; 1
 50a:	9f 6f       	ori	r25, 0xFF	; 255
 50c:	01 96       	adiw	r24, 0x01	; 1
//Returns: None
void USART_Send(unsigned char sendMe, unsigned char usartNum)
{
	if (usartNum != 1) {
		//while( !(UCSR0A & (1 << UDRE0)) );
		UDR0 = sendMe;
 50e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 512:	08 95       	ret

00000514 <tick_sampleSensors>:
enum Buzzer_Sm {start_buzzer, wait_buzzer, buzz_buzzer} state_buzzer;

// Tick functions
void tick_sampleSensors() {
	// Transitions
	switch(state_sampleSensors) {
 514:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <state_sampleSensors>
 518:	88 23       	and	r24, r24
 51a:	19 f0       	breq	.+6      	; 0x522 <tick_sampleSensors+0xe>
 51c:	81 30       	cpi	r24, 0x01	; 1
 51e:	41 f0       	breq	.+16     	; 0x530 <tick_sampleSensors+0x1c>
 520:	04 c0       	rjmp	.+8      	; 0x52a <tick_sampleSensors+0x16>
		case start_sampleSensors:
			state_sampleSensors = poll_sampleSensor;
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <state_sampleSensors>
		break;
 528:	03 c0       	rjmp	.+6      	; 0x530 <tick_sampleSensors+0x1c>
		case poll_sampleSensor:
			state_sampleSensors = poll_sampleSensor;
		break;
		
		default:
			state_sampleSensors = start_sampleSensors;
 52a:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <state_sampleSensors>
		break;
		
		default:
		break;
	}
}
 52e:	08 95       	ret
	}
	
	// Actions
	switch(state_sampleSensors) {
		case poll_sampleSensor:
			x = readHC_SR04(sen_x.m_trig, sen_x.m_echo);
 530:	e8 e0       	ldi	r30, 0x08	; 8
 532:	f1 e0       	ldi	r31, 0x01	; 1
 534:	61 81       	ldd	r22, Z+1	; 0x01
 536:	80 81       	ld	r24, Z
 538:	b7 de       	rcall	.-658    	; 0x2a8 <readHC_SR04>
 53a:	60 93 2c 01 	sts	0x012C, r22	; 0x80012c <x>
 53e:	70 93 2d 01 	sts	0x012D, r23	; 0x80012d <x+0x1>
 542:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <x+0x2>
 546:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <x+0x3>
			y = readHC_SR04(sen_y.m_trig, sen_y.m_echo);
 54a:	e6 e0       	ldi	r30, 0x06	; 6
 54c:	f1 e0       	ldi	r31, 0x01	; 1
 54e:	61 81       	ldd	r22, Z+1	; 0x01
 550:	80 81       	ld	r24, Z
 552:	aa de       	rcall	.-684    	; 0x2a8 <readHC_SR04>
 554:	60 93 9f 01 	sts	0x019F, r22	; 0x80019f <y>
 558:	70 93 a0 01 	sts	0x01A0, r23	; 0x8001a0 <y+0x1>
 55c:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <y+0x2>
 560:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <y+0x3>
			z = readHC_SR04(sen_z.m_trig, sen_z.m_echo);
 564:	e4 e0       	ldi	r30, 0x04	; 4
 566:	f1 e0       	ldi	r31, 0x01	; 1
 568:	61 81       	ldd	r22, Z+1	; 0x01
 56a:	80 81       	ld	r24, Z
 56c:	9d de       	rcall	.-710    	; 0x2a8 <readHC_SR04>
 56e:	60 93 89 01 	sts	0x0189, r22	; 0x800189 <z>
 572:	70 93 8a 01 	sts	0x018A, r23	; 0x80018a <z+0x1>
 576:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <z+0x2>
 57a:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <z+0x3>
 57e:	08 95       	ret

00000580 <tick_transmit>:
		default:
		break;
	}
}

void tick_transmit() {
 580:	8f 92       	push	r8
 582:	af 92       	push	r10
 584:	cf 92       	push	r12
 586:	ef 92       	push	r14
 588:	ff 92       	push	r15
 58a:	0f 93       	push	r16
 58c:	1f 93       	push	r17
	// Transitions
	switch(state_transmit) {
 58e:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <state_transmit>
 592:	88 23       	and	r24, r24
 594:	19 f0       	breq	.+6      	; 0x59c <tick_transmit+0x1c>
 596:	81 30       	cpi	r24, 0x01	; 1
 598:	41 f0       	breq	.+16     	; 0x5aa <tick_transmit+0x2a>
 59a:	04 c0       	rjmp	.+8      	; 0x5a4 <tick_transmit+0x24>
		case start_transmit:
			state_transmit = send_transmit;
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <state_transmit>
		break;
 5a2:	03 c0       	rjmp	.+6      	; 0x5aa <tick_transmit+0x2a>
		case send_transmit:
			state_transmit = send_transmit;
		break;
		
		default:
			state_transmit = start_transmit;
 5a4:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <state_transmit>
		break;
		
		default:
		break;
	}
}
 5a8:	20 c0       	rjmp	.+64     	; 0x5ea <tick_transmit+0x6a>
	}
	
	// Actions
	switch(state_transmit) {
		case send_transmit:
			transmit(p_x, p_y, p_z, 1, g_Loc, 2);
 5aa:	e0 90 9b 01 	lds	r14, 0x019B	; 0x80019b <p_z>
 5ae:	f0 90 9c 01 	lds	r15, 0x019C	; 0x80019c <p_z+0x1>
 5b2:	00 91 9d 01 	lds	r16, 0x019D	; 0x80019d <p_z+0x2>
 5b6:	10 91 9e 01 	lds	r17, 0x019E	; 0x80019e <p_z+0x3>
 5ba:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <p_y>
 5be:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <p_y+0x1>
 5c2:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <p_y+0x2>
 5c6:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <p_y+0x3>
 5ca:	60 91 a5 01 	lds	r22, 0x01A5	; 0x8001a5 <p_x>
 5ce:	70 91 a6 01 	lds	r23, 0x01A6	; 0x8001a6 <p_x+0x1>
 5d2:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <p_x+0x2>
 5d6:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <p_x+0x3>
 5da:	68 94       	set
 5dc:	88 24       	eor	r8, r8
 5de:	81 f8       	bld	r8, 1
 5e0:	a0 90 34 01 	lds	r10, 0x0134	; 0x800134 <g_Loc>
 5e4:	cc 24       	eor	r12, r12
 5e6:	c3 94       	inc	r12
 5e8:	65 df       	rcall	.-310    	; 0x4b4 <transmit>
		break;
		
		default:
		break;
	}
}
 5ea:	1f 91       	pop	r17
 5ec:	0f 91       	pop	r16
 5ee:	ff 90       	pop	r15
 5f0:	ef 90       	pop	r14
 5f2:	cf 90       	pop	r12
 5f4:	af 90       	pop	r10
 5f6:	8f 90       	pop	r8
 5f8:	08 95       	ret

000005fa <tick_buzzer>:
}

unsigned char i;
void tick_buzzer() {
	// Transitions
	switch (state_buzzer) {
 5fa:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <state_buzzer>
 5fe:	81 30       	cpi	r24, 0x01	; 1
 600:	51 f0       	breq	.+20     	; 0x616 <tick_buzzer+0x1c>
 602:	18 f0       	brcs	.+6      	; 0x60a <tick_buzzer+0x10>
 604:	82 30       	cpi	r24, 0x02	; 2
 606:	79 f0       	breq	.+30     	; 0x626 <tick_buzzer+0x2c>
 608:	1a c0       	rjmp	.+52     	; 0x63e <tick_buzzer+0x44>
		case start_buzzer:
			state_buzzer = wait_buzzer;
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <state_buzzer>
			i = 0;
 610:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <i>
		break;
 614:	08 95       	ret
		
		case wait_buzzer:
			if (!pulse) {
 616:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <pulse>
 61a:	88 23       	and	r24, r24
 61c:	f1 f0       	breq	.+60     	; 0x65a <tick_buzzer+0x60>
				state_buzzer = wait_buzzer;
			} else {
				state_buzzer = buzz_buzzer;
 61e:	82 e0       	ldi	r24, 0x02	; 2
 620:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <state_buzzer>
 624:	0e c0       	rjmp	.+28     	; 0x642 <tick_buzzer+0x48>
			}
		break;
		
		case buzz_buzzer:
			if (i > 250) {
 626:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <i>
 62a:	8b 3f       	cpi	r24, 0xFB	; 251
 62c:	50 f0       	brcs	.+20     	; 0x642 <tick_buzzer+0x48>
				state_buzzer = wait_buzzer;
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <state_buzzer>
				pulse = 0;
 634:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <pulse>
				i = 0;
 638:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <i>
 63c:	08 95       	ret
		default:
		break;
	}
	
	// Actions
	switch (state_buzzer) {
 63e:	82 30       	cpi	r24, 0x02	; 2
 640:	61 f4       	brne	.+24     	; 0x65a <tick_buzzer+0x60>
		case buzz_buzzer:
			if (i%2==0)PORTA = SetBit(PORTA, 6, 1);
 642:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <i>
 646:	80 fd       	sbrc	r24, 0
 648:	02 c0       	rjmp	.+4      	; 0x64e <tick_buzzer+0x54>
 64a:	16 9a       	sbi	0x02, 6	; 2
 64c:	01 c0       	rjmp	.+2      	; 0x650 <tick_buzzer+0x56>
			else PORTA = SetBit(PORTA, 6, 0);
 64e:	16 98       	cbi	0x02, 6	; 2
			i++; 
 650:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <i>
 654:	8f 5f       	subi	r24, 0xFF	; 255
 656:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <i>
 65a:	08 95       	ret

0000065c <plot>:
}

// Game Manager functions
// Chose a random location for the goal
void plot() {
	int loc = rand() % (0x0F + 1 - 0x00) + 0x00; 
 65c:	7a d3       	rcall	.+1780   	; 0xd52 <rand>
	g_Loc = (unsigned char) loc;
 65e:	8f 70       	andi	r24, 0x0F	; 15
 660:	90 78       	andi	r25, 0x80	; 128
 662:	99 23       	and	r25, r25
 664:	24 f4       	brge	.+8      	; 0x66e <plot+0x12>
 666:	01 97       	sbiw	r24, 0x01	; 1
 668:	80 6f       	ori	r24, 0xF0	; 240
 66a:	9f 6f       	ori	r25, 0xFF	; 255
 66c:	01 96       	adiw	r24, 0x01	; 1
 66e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <g_Loc>
 672:	08 95       	ret

00000674 <move>:
}

// Update the player position based on sensors
void move() {
 674:	4f 92       	push	r4
 676:	5f 92       	push	r5
 678:	6f 92       	push	r6
 67a:	7f 92       	push	r7
 67c:	8f 92       	push	r8
 67e:	9f 92       	push	r9
 680:	af 92       	push	r10
 682:	bf 92       	push	r11
 684:	cf 92       	push	r12
 686:	ef 92       	push	r14
 688:	ff 92       	push	r15
 68a:	0f 93       	push	r16
 68c:	1f 93       	push	r17
 68e:	cf 93       	push	r28
 690:	df 93       	push	r29
 692:	00 d0       	rcall	.+0      	; 0x694 <move+0x20>
 694:	00 d0       	rcall	.+0      	; 0x696 <move+0x22>
 696:	cd b7       	in	r28, 0x3d	; 61
 698:	de b7       	in	r29, 0x3e	; 62
	LCD_DisplayString(1, "GO!");
 69a:	6e e0       	ldi	r22, 0x0E	; 14
 69c:	71 e0       	ldi	r23, 0x01	; 1
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	52 dd       	rcall	.-1372   	; 0x146 <LCD_DisplayString>
	p_x = (unsigned char) x;
 6a2:	80 90 2c 01 	lds	r8, 0x012C	; 0x80012c <x>
 6a6:	90 90 2d 01 	lds	r9, 0x012D	; 0x80012d <x+0x1>
 6aa:	a0 90 2e 01 	lds	r10, 0x012E	; 0x80012e <x+0x2>
 6ae:	b0 90 2f 01 	lds	r11, 0x012F	; 0x80012f <x+0x3>
 6b2:	c5 01       	movw	r24, r10
 6b4:	b4 01       	movw	r22, r8
 6b6:	02 d2       	rcall	.+1028   	; 0xabc <__fixunssfsi>
 6b8:	70 e0       	ldi	r23, 0x00	; 0
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	2a d2       	rcall	.+1108   	; 0xb14 <__floatunsisf>
 6c0:	60 93 a5 01 	sts	0x01A5, r22	; 0x8001a5 <p_x>
 6c4:	70 93 a6 01 	sts	0x01A6, r23	; 0x8001a6 <p_x+0x1>
 6c8:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <p_x+0x2>
 6cc:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <p_x+0x3>
	p_y = (unsigned char) y;
 6d0:	40 90 9f 01 	lds	r4, 0x019F	; 0x80019f <y>
 6d4:	50 90 a0 01 	lds	r5, 0x01A0	; 0x8001a0 <y+0x1>
 6d8:	60 90 a1 01 	lds	r6, 0x01A1	; 0x8001a1 <y+0x2>
 6dc:	70 90 a2 01 	lds	r7, 0x01A2	; 0x8001a2 <y+0x3>
 6e0:	c3 01       	movw	r24, r6
 6e2:	b2 01       	movw	r22, r4
 6e4:	eb d1       	rcall	.+982    	; 0xabc <__fixunssfsi>
 6e6:	70 e0       	ldi	r23, 0x00	; 0
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	13 d2       	rcall	.+1062   	; 0xb14 <__floatunsisf>
 6ee:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <p_y>
 6f2:	70 93 31 01 	sts	0x0131, r23	; 0x800131 <p_y+0x1>
 6f6:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <p_y+0x2>
 6fa:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <p_y+0x3>
	p_z = (unsigned char) z;
 6fe:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <z>
 702:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <z+0x1>
 706:	a0 91 8b 01 	lds	r26, 0x018B	; 0x80018b <z+0x2>
 70a:	b0 91 8c 01 	lds	r27, 0x018C	; 0x80018c <z+0x3>
 70e:	89 83       	std	Y+1, r24	; 0x01
 710:	9a 83       	std	Y+2, r25	; 0x02
 712:	ab 83       	std	Y+3, r26	; 0x03
 714:	bc 83       	std	Y+4, r27	; 0x04
 716:	bc 01       	movw	r22, r24
 718:	cd 01       	movw	r24, r26
 71a:	d0 d1       	rcall	.+928    	; 0xabc <__fixunssfsi>
 71c:	70 e0       	ldi	r23, 0x00	; 0
 71e:	80 e0       	ldi	r24, 0x00	; 0
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	f8 d1       	rcall	.+1008   	; 0xb14 <__floatunsisf>
 724:	60 93 9b 01 	sts	0x019B, r22	; 0x80019b <p_z>
 728:	70 93 9c 01 	sts	0x019C, r23	; 0x80019c <p_z+0x1>
 72c:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <p_z+0x2>
 730:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <p_z+0x3>
	
	unsigned char currLoc = (map(x,y,z,0) >> 2) & 0x0F;
 734:	c1 2c       	mov	r12, r1
 736:	e9 80       	ldd	r14, Y+1	; 0x01
 738:	fa 80       	ldd	r15, Y+2	; 0x02
 73a:	0b 81       	ldd	r16, Y+3	; 0x03
 73c:	1c 81       	ldd	r17, Y+4	; 0x04
 73e:	a3 01       	movw	r20, r6
 740:	92 01       	movw	r18, r4
 742:	c5 01       	movw	r24, r10
 744:	b4 01       	movw	r22, r8
 746:	e9 dd       	rcall	.-1070   	; 0x31a <map>
	
	if (g_Loc == currLoc) {
 748:	86 95       	lsr	r24
 74a:	86 95       	lsr	r24
 74c:	8f 70       	andi	r24, 0x0F	; 15
 74e:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <g_Loc>
 752:	89 13       	cpse	r24, r25
 754:	0e c0       	rjmp	.+28     	; 0x772 <move+0xfe>
		collected++;
 756:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <collected>
 75a:	8f 5f       	subi	r24, 0xFF	; 255
 75c:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <collected>
		score++;
 760:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <score>
 764:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <score+0x1>
 768:	01 96       	adiw	r24, 0x01	; 1
 76a:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <score+0x1>
 76e:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <score>
	}
}
 772:	0f 90       	pop	r0
 774:	0f 90       	pop	r0
 776:	0f 90       	pop	r0
 778:	0f 90       	pop	r0
 77a:	df 91       	pop	r29
 77c:	cf 91       	pop	r28
 77e:	1f 91       	pop	r17
 780:	0f 91       	pop	r16
 782:	ff 90       	pop	r15
 784:	ef 90       	pop	r14
 786:	cf 90       	pop	r12
 788:	bf 90       	pop	r11
 78a:	af 90       	pop	r10
 78c:	9f 90       	pop	r9
 78e:	8f 90       	pop	r8
 790:	7f 90       	pop	r7
 792:	6f 90       	pop	r6
 794:	5f 90       	pop	r5
 796:	4f 90       	pop	r4
 798:	08 95       	ret

0000079a <display>:

// LCD stuff
char buffer[10];
char msg[80];
void display() {
 79a:	cf 93       	push	r28
 79c:	df 93       	push	r29
	int ath = eeprom_read_byte( (const uint8_t *)10);
 79e:	8a e0       	ldi	r24, 0x0A	; 10
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	2a d3       	rcall	.+1620   	; 0xdf8 <eeprom_read_byte>
 7a4:	ec 01       	movw	r28, r24
	
	if (score > ath) {
 7a6:	60 91 87 01 	lds	r22, 0x0187	; 0x800187 <score>
 7aa:	70 91 88 01 	lds	r23, 0x0188	; 0x800188 <score+0x1>
 7ae:	86 17       	cp	r24, r22
 7b0:	97 07       	cpc	r25, r23
 7b2:	34 f4       	brge	.+12     	; 0x7c0 <display+0x26>
		eeprom_update_byte( (uint8_t *)10 , score);
 7b4:	8a e0       	ldi	r24, 0x0A	; 10
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	27 d3       	rcall	.+1614   	; 0xe08 <eeprom_update_byte>
		ATH_FLAG = 1;
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <ATH_FLAG>
	}
	
	pulse = 1;
 7c0:	81 e0       	ldi	r24, 0x01	; 1
 7c2:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <pulse>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 7c6:	4a e0       	ldi	r20, 0x0A	; 10
 7c8:	6f e8       	ldi	r22, 0x8F	; 143
 7ca:	71 e0       	ldi	r23, 0x01	; 1
 7cc:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <score>
 7d0:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <score+0x1>
 7d4:	de d2       	rcall	.+1468   	; 0xd92 <__itoa_ncheck>
	itoa(score, buffer, 10);
	strcpy(msg, buffer);
 7d6:	6f e8       	ldi	r22, 0x8F	; 143
 7d8:	71 e0       	ldi	r23, 0x01	; 1
 7da:	87 e3       	ldi	r24, 0x37	; 55
 7dc:	91 e0       	ldi	r25, 0x01	; 1
 7de:	d2 d2       	rcall	.+1444   	; 0xd84 <strcpy>
	strcat(msg, " ATH: ");
 7e0:	a7 e3       	ldi	r26, 0x37	; 55
 7e2:	b1 e0       	ldi	r27, 0x01	; 1
 7e4:	0d 90       	ld	r0, X+
 7e6:	00 20       	and	r0, r0
 7e8:	e9 f7       	brne	.-6      	; 0x7e4 <display+0x4a>
 7ea:	11 97       	sbiw	r26, 0x01	; 1
 7ec:	87 e0       	ldi	r24, 0x07	; 7
 7ee:	e2 e1       	ldi	r30, 0x12	; 18
 7f0:	f1 e0       	ldi	r31, 0x01	; 1
 7f2:	01 90       	ld	r0, Z+
 7f4:	0d 92       	st	X+, r0
 7f6:	8a 95       	dec	r24
 7f8:	e1 f7       	brne	.-8      	; 0x7f2 <display+0x58>
 7fa:	4a e0       	ldi	r20, 0x0A	; 10
 7fc:	6f e8       	ldi	r22, 0x8F	; 143
 7fe:	71 e0       	ldi	r23, 0x01	; 1
 800:	ce 01       	movw	r24, r28
 802:	c7 d2       	rcall	.+1422   	; 0xd92 <__itoa_ncheck>
	itoa(ath, buffer, 10);
	strcat(msg, buffer);
 804:	6f e8       	ldi	r22, 0x8F	; 143
 806:	71 e0       	ldi	r23, 0x01	; 1
 808:	87 e3       	ldi	r24, 0x37	; 55
 80a:	91 e0       	ldi	r25, 0x01	; 1
 80c:	b0 d2       	rcall	.+1376   	; 0xd6e <strcat>
 80e:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <ATH_FLAG>
	
	if (!ATH_FLAG) {
 812:	81 11       	cpse	r24, r1
 814:	12 c0       	rjmp	.+36     	; 0x83a <display+0xa0>
 816:	a7 e3       	ldi	r26, 0x37	; 55
		strcat(msg, " NEW ");
 818:	b1 e0       	ldi	r27, 0x01	; 1
 81a:	0d 90       	ld	r0, X+
 81c:	00 20       	and	r0, r0
 81e:	e9 f7       	brne	.-6      	; 0x81a <display+0x80>
 820:	11 97       	sbiw	r26, 0x01	; 1
 822:	86 e0       	ldi	r24, 0x06	; 6
 824:	e9 e1       	ldi	r30, 0x19	; 25
 826:	f1 e0       	ldi	r31, 0x01	; 1
 828:	01 90       	ld	r0, Z+
 82a:	0d 92       	st	X+, r0
 82c:	8a 95       	dec	r24
 82e:	e1 f7       	brne	.-8      	; 0x828 <display+0x8e>
		strcat(msg, 0b01111111);
 830:	6f e7       	ldi	r22, 0x7F	; 127
 832:	70 e0       	ldi	r23, 0x00	; 0
 834:	87 e3       	ldi	r24, 0x37	; 55
 836:	91 e0       	ldi	r25, 0x01	; 1
 838:	9a d2       	rcall	.+1332   	; 0xd6e <strcat>
	}
	
	LCD_DisplayString(1, msg);
 83a:	67 e3       	ldi	r22, 0x37	; 55
 83c:	71 e0       	ldi	r23, 0x01	; 1
 83e:	81 e0       	ldi	r24, 0x01	; 1
 840:	82 dc       	rcall	.-1788   	; 0x146 <LCD_DisplayString>
	
	if (!ATH_FLAG)
 842:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <ATH_FLAG>
 846:	81 11       	cpse	r24, r1
 848:	02 c0       	rjmp	.+4      	; 0x84e <display+0xb4>
		LCD_WriteData(0b01111111);
 84a:	8f e7       	ldi	r24, 0x7F	; 127
 84c:	73 dc       	rcall	.-1818   	; 0x134 <LCD_WriteData>
 84e:	df 91       	pop	r29
}
 850:	cf 91       	pop	r28
 852:	08 95       	ret

00000854 <tick_gameManager>:
 854:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <state_gameManager>
unsigned char timer;
char ready[80];
unsigned char ATH_FLAG;
void tick_gameManager() {
	// Transition
	switch(state_gameManager) {
 858:	82 30       	cpi	r24, 0x02	; 2
 85a:	09 f4       	brne	.+2      	; 0x85e <tick_gameManager+0xa>
 85c:	48 c0       	rjmp	.+144    	; 0x8ee <tick_gameManager+0x9a>
 85e:	28 f4       	brcc	.+10     	; 0x86a <tick_gameManager+0x16>
 860:	88 23       	and	r24, r24
 862:	51 f0       	breq	.+20     	; 0x878 <tick_gameManager+0x24>
 864:	81 30       	cpi	r24, 0x01	; 1
 866:	61 f0       	breq	.+24     	; 0x880 <tick_gameManager+0x2c>
 868:	6d c0       	rjmp	.+218    	; 0x944 <tick_gameManager+0xf0>
 86a:	83 30       	cpi	r24, 0x03	; 3
 86c:	09 f4       	brne	.+2      	; 0x870 <tick_gameManager+0x1c>
 86e:	4a c0       	rjmp	.+148    	; 0x904 <tick_gameManager+0xb0>
 870:	84 30       	cpi	r24, 0x04	; 4
 872:	09 f4       	brne	.+2      	; 0x876 <tick_gameManager+0x22>
 874:	61 c0       	rjmp	.+194    	; 0x938 <tick_gameManager+0xe4>
 876:	66 c0       	rjmp	.+204    	; 0x944 <tick_gameManager+0xf0>
		case start_game:
			state_gameManager = idle_game;
 878:	81 e0       	ldi	r24, 0x01	; 1
 87a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <state_gameManager>
		break;
 87e:	72 c0       	rjmp	.+228    	; 0x964 <tick_gameManager+0x110>
		
		case idle_game:
			ATH_FLAG = 0;
 880:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <ATH_FLAG>
			strcpy(ready, "Ready?");
 884:	87 e0       	ldi	r24, 0x07	; 7
 886:	ef e1       	ldi	r30, 0x1F	; 31
 888:	f1 e0       	ldi	r31, 0x01	; 1
 88a:	a9 ea       	ldi	r26, 0xA9	; 169
 88c:	b1 e0       	ldi	r27, 0x01	; 1
 88e:	01 90       	ld	r0, Z+
 890:	0d 92       	st	X+, r0
 892:	8a 95       	dec	r24
 894:	e1 f7       	brne	.-8      	; 0x88e <tick_gameManager+0x3a>
			//strcat(ready, (char)0b01111111);
			LCD_DisplayString(1, ready);
 896:	69 ea       	ldi	r22, 0xA9	; 169
 898:	71 e0       	ldi	r23, 0x01	; 1
 89a:	81 e0       	ldi	r24, 0x01	; 1
 89c:	54 dc       	rcall	.-1880   	; 0x146 <LCD_DisplayString>
			if (Start_Restart) {
 89e:	07 99       	sbic	0x00, 7	; 0
 8a0:	1e c0       	rjmp	.+60     	; 0x8de <tick_gameManager+0x8a>
				p_x = 0;
 8a2:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <p_x>
 8a6:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <p_x+0x1>
 8aa:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <p_x+0x2>
 8ae:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <p_x+0x3>
				p_y = 0;
 8b2:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <p_y>
 8b6:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <p_y+0x1>
 8ba:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <p_y+0x2>
 8be:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <p_y+0x3>
				p_z = 0;
 8c2:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <p_z>
 8c6:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <p_z+0x1>
 8ca:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <p_z+0x2>
 8ce:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <p_z+0x3>
				g_Loc = 0;
 8d2:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <g_Loc>
				state_gameManager = plot_game;
 8d6:	82 e0       	ldi	r24, 0x02	; 2
 8d8:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <state_gameManager>
 8dc:	03 c0       	rjmp	.+6      	; 0x8e4 <tick_gameManager+0x90>
			} else {
				state_gameManager = idle_game;
 8de:	81 e0       	ldi	r24, 0x01	; 1
 8e0:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <state_gameManager>
			}
			score = 0;
 8e4:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <score+0x1>
 8e8:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <score>
		break;
 8ec:	2e c0       	rjmp	.+92     	; 0x94a <tick_gameManager+0xf6>
		
		case plot_game:
			if (Start_Restart) {
 8ee:	07 99       	sbic	0x00, 7	; 0
 8f0:	03 c0       	rjmp	.+6      	; 0x8f8 <tick_gameManager+0xa4>
				state_gameManager = start_game;
 8f2:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <state_gameManager>
 8f6:	03 c0       	rjmp	.+6      	; 0x8fe <tick_gameManager+0xaa>
			} else {
				state_gameManager = move_game;
 8f8:	83 e0       	ldi	r24, 0x03	; 3
 8fa:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <state_gameManager>
			}
			pulse = 0x00;
 8fe:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <pulse>
		break;
 902:	23 c0       	rjmp	.+70     	; 0x94a <tick_gameManager+0xf6>
		
		case move_game:
			if (collected) {
 904:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <collected>
 908:	88 23       	and	r24, r24
 90a:	49 f0       	breq	.+18     	; 0x91e <tick_gameManager+0xca>
				state_gameManager = plot_game;
 90c:	82 e0       	ldi	r24, 0x02	; 2
 90e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <state_gameManager>
				pulse = 0x01;
 912:	81 e0       	ldi	r24, 0x01	; 1
 914:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <pulse>
				collected = 0;
 918:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <collected>
 91c:	2f c0       	rjmp	.+94     	; 0x97c <tick_gameManager+0x128>
			} else if (Start_Restart) {
 91e:	07 99       	sbic	0x00, 7	; 0
 920:	03 c0       	rjmp	.+6      	; 0x928 <tick_gameManager+0xd4>
				state_gameManager = start_game;
 922:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <state_gameManager>
 926:	08 95       	ret
			} else if (timer >= ThirtySeconds) {
 928:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <timer>
 92c:	88 37       	cpi	r24, 0x78	; 120
 92e:	68 f1       	brcs	.+90     	; 0x98a <tick_gameManager+0x136>
				state_gameManager = display_game;
 930:	84 e0       	ldi	r24, 0x04	; 4
 932:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <state_gameManager>
 936:	30 c0       	rjmp	.+96     	; 0x998 <tick_gameManager+0x144>
				state_gameManager = move_game;
			}
		break;
		
		case display_game:
			if (Start_Restart) {
 938:	07 99       	sbic	0x00, 7	; 0
 93a:	2e c0       	rjmp	.+92     	; 0x998 <tick_gameManager+0x144>
				state_gameManager = idle_game;
 93c:	81 e0       	ldi	r24, 0x01	; 1
 93e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <state_gameManager>
 942:	10 c0       	rjmp	.+32     	; 0x964 <tick_gameManager+0x110>
				state_gameManager = display_game;
			}
		break;
		
		default:
			state_gameManager = start_game;
 944:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <state_gameManager>
		break;
 948:	08 95       	ret
	}
	
	// Actions
	switch(state_gameManager) {
 94a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <state_gameManager>
 94e:	82 30       	cpi	r24, 0x02	; 2
 950:	a9 f0       	breq	.+42     	; 0x97c <tick_gameManager+0x128>
 952:	18 f4       	brcc	.+6      	; 0x95a <tick_gameManager+0x106>
 954:	81 30       	cpi	r24, 0x01	; 1
 956:	09 f5       	brne	.+66     	; 0x99a <tick_gameManager+0x146>
 958:	05 c0       	rjmp	.+10     	; 0x964 <tick_gameManager+0x110>
 95a:	83 30       	cpi	r24, 0x03	; 3
 95c:	b1 f0       	breq	.+44     	; 0x98a <tick_gameManager+0x136>
 95e:	84 30       	cpi	r24, 0x04	; 4
 960:	d9 f0       	breq	.+54     	; 0x998 <tick_gameManager+0x144>
		case idle_game:
			show();
 962:	08 95       	ret
 964:	c9 dd       	rcall	.-1134   	; 0x4f8 <show>
			collected = 0;
 966:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <collected>
			pulse = 0;
 96a:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <pulse>
			score = 0;
 96e:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <score+0x1>
 972:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <score>
			timer = 0;
 976:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <timer>
		break;
		
		case plot_game:
			plot();
 97a:	08 95       	ret
 97c:	6f de       	rcall	.-802    	; 0x65c <plot>
			timer++;
 97e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <timer>
 982:	8f 5f       	subi	r24, 0xFF	; 255
 984:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <timer>
		break;
		
		case move_game:
			move();
 988:	08 95       	ret
 98a:	74 de       	rcall	.-792    	; 0x674 <move>
			timer++;
 98c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <timer>
 990:	8f 5f       	subi	r24, 0xFF	; 255
 992:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <timer>
		break;
		
		case display_game:
			display();
 996:	08 95       	ret
 998:	00 cf       	rjmp	.-512    	; 0x79a <display>
 99a:	08 95       	ret

0000099c <main>:
}

unsigned char counter = 0x00;
int main(void)
{
	initUSART(0); // initializes USART0
 99c:	80 e0       	ldi	r24, 0x00	; 0
 99e:	5d dc       	rcall	.-1862   	; 0x25a <initUSART>
	initUSART(1); // initializes USART1
 9a0:	81 e0       	ldi	r24, 0x01	; 1
 9a2:	5b dc       	rcall	.-1866   	; 0x25a <initUSART>
    
	TimerSet(1);
 9a4:	61 e0       	ldi	r22, 0x01	; 1
 9a6:	70 e0       	ldi	r23, 0x00	; 0
 9a8:	80 e0       	ldi	r24, 0x00	; 0
 9aa:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 9ac:	e5 db       	rcall	.-2102   	; 0x178 <TimerSet>
 9ae:	f5 db       	rcall	.-2070   	; 0x19a <TimerOn>
	
	initHC_SR04();
 9b0:	76 dc       	rcall	.-1812   	; 0x29e <initHC_SR04>
 9b2:	8f ef       	ldi	r24, 0xFF	; 255
	
	DDRC = 0xFF; PORTC = 0x00; // LCD data lines
 9b4:	87 b9       	out	0x07, r24	; 7
 9b6:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00; // LCD control lines
 9b8:	8a b9       	out	0x0a, r24	; 10
 9ba:	1b b8       	out	0x0b, r1	; 11
	
	LCD_init();
 9bc:	ac db       	rcall	.-2216   	; 0x116 <LCD_init>
 9be:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <TimerFlag>
	
	while (1) 
    {
		while(!TimerFlag) {}
 9c2:	88 23       	and	r24, r24
 9c4:	e1 f3       	breq	.-8      	; 0x9be <main+0x22>
		if (counter >= QuarterSecond) {
 9c6:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 9ca:	8a 3f       	cpi	r24, 0xFA	; 250
			tick_sampleSensors();
 9cc:	28 f0       	brcs	.+10     	; 0x9d8 <main+0x3c>
 9ce:	a2 dd       	rcall	.-1212   	; 0x514 <tick_sampleSensors>
			tick_transmit();
 9d0:	d7 dd       	rcall	.-1106   	; 0x580 <tick_transmit>
 9d2:	40 df       	rcall	.-384    	; 0x854 <tick_gameManager>
			tick_gameManager();
 9d4:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end>
			counter = 0;
 9d8:	10 de       	rcall	.-992    	; 0x5fa <tick_buzzer>
 9da:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
		}
		tick_buzzer();
 9de:	8f 5f       	subi	r24, 0xFF	; 255
		
		
		counter++;
 9e0:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
 9e4:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <TimerFlag>
 9e8:	ea cf       	rjmp	.-44     	; 0x9be <main+0x22>

000009ea <__subsf3>:
		TimerFlag = 0;
 9ea:	50 58       	subi	r21, 0x80	; 128

000009ec <__addsf3>:
 9ec:	bb 27       	eor	r27, r27

    }
 9ee:	aa 27       	eor	r26, r26
 9f0:	0e d0       	rcall	.+28     	; 0xa0e <__addsf3x>
 9f2:	08 c1       	rjmp	.+528    	; 0xc04 <__fp_round>
 9f4:	f9 d0       	rcall	.+498    	; 0xbe8 <__fp_pscA>
 9f6:	30 f0       	brcs	.+12     	; 0xa04 <__addsf3+0x18>
 9f8:	fe d0       	rcall	.+508    	; 0xbf6 <__fp_pscB>
 9fa:	20 f0       	brcs	.+8      	; 0xa04 <__addsf3+0x18>
 9fc:	31 f4       	brne	.+12     	; 0xa0a <__addsf3+0x1e>
 9fe:	9f 3f       	cpi	r25, 0xFF	; 255
 a00:	11 f4       	brne	.+4      	; 0xa06 <__addsf3+0x1a>
 a02:	1e f4       	brtc	.+6      	; 0xa0a <__addsf3+0x1e>
 a04:	ee c0       	rjmp	.+476    	; 0xbe2 <__fp_nan>
 a06:	0e f4       	brtc	.+2      	; 0xa0a <__addsf3+0x1e>
 a08:	e0 95       	com	r30
 a0a:	e7 fb       	bst	r30, 7
 a0c:	e4 c0       	rjmp	.+456    	; 0xbd6 <__fp_inf>

00000a0e <__addsf3x>:
 a0e:	e9 2f       	mov	r30, r25
 a10:	0a d1       	rcall	.+532    	; 0xc26 <__fp_split3>
 a12:	80 f3       	brcs	.-32     	; 0x9f4 <__addsf3+0x8>
 a14:	ba 17       	cp	r27, r26
 a16:	62 07       	cpc	r22, r18
 a18:	73 07       	cpc	r23, r19
 a1a:	84 07       	cpc	r24, r20
 a1c:	95 07       	cpc	r25, r21
 a1e:	18 f0       	brcs	.+6      	; 0xa26 <__addsf3x+0x18>
 a20:	71 f4       	brne	.+28     	; 0xa3e <__addsf3x+0x30>
 a22:	9e f5       	brtc	.+102    	; 0xa8a <__addsf3x+0x7c>
 a24:	22 c1       	rjmp	.+580    	; 0xc6a <__fp_zero>
 a26:	0e f4       	brtc	.+2      	; 0xa2a <__addsf3x+0x1c>
 a28:	e0 95       	com	r30
 a2a:	0b 2e       	mov	r0, r27
 a2c:	ba 2f       	mov	r27, r26
 a2e:	a0 2d       	mov	r26, r0
 a30:	0b 01       	movw	r0, r22
 a32:	b9 01       	movw	r22, r18
 a34:	90 01       	movw	r18, r0
 a36:	0c 01       	movw	r0, r24
 a38:	ca 01       	movw	r24, r20
 a3a:	a0 01       	movw	r20, r0
 a3c:	11 24       	eor	r1, r1
 a3e:	ff 27       	eor	r31, r31
 a40:	59 1b       	sub	r21, r25
 a42:	99 f0       	breq	.+38     	; 0xa6a <__addsf3x+0x5c>
 a44:	59 3f       	cpi	r21, 0xF9	; 249
 a46:	50 f4       	brcc	.+20     	; 0xa5c <__addsf3x+0x4e>
 a48:	50 3e       	cpi	r21, 0xE0	; 224
 a4a:	68 f1       	brcs	.+90     	; 0xaa6 <__addsf3x+0x98>
 a4c:	1a 16       	cp	r1, r26
 a4e:	f0 40       	sbci	r31, 0x00	; 0
 a50:	a2 2f       	mov	r26, r18
 a52:	23 2f       	mov	r18, r19
 a54:	34 2f       	mov	r19, r20
 a56:	44 27       	eor	r20, r20
 a58:	58 5f       	subi	r21, 0xF8	; 248
 a5a:	f3 cf       	rjmp	.-26     	; 0xa42 <__addsf3x+0x34>
 a5c:	46 95       	lsr	r20
 a5e:	37 95       	ror	r19
 a60:	27 95       	ror	r18
 a62:	a7 95       	ror	r26
 a64:	f0 40       	sbci	r31, 0x00	; 0
 a66:	53 95       	inc	r21
 a68:	c9 f7       	brne	.-14     	; 0xa5c <__addsf3x+0x4e>
 a6a:	7e f4       	brtc	.+30     	; 0xa8a <__addsf3x+0x7c>
 a6c:	1f 16       	cp	r1, r31
 a6e:	ba 0b       	sbc	r27, r26
 a70:	62 0b       	sbc	r22, r18
 a72:	73 0b       	sbc	r23, r19
 a74:	84 0b       	sbc	r24, r20
 a76:	ba f0       	brmi	.+46     	; 0xaa6 <__addsf3x+0x98>
 a78:	91 50       	subi	r25, 0x01	; 1
 a7a:	a1 f0       	breq	.+40     	; 0xaa4 <__addsf3x+0x96>
 a7c:	ff 0f       	add	r31, r31
 a7e:	bb 1f       	adc	r27, r27
 a80:	66 1f       	adc	r22, r22
 a82:	77 1f       	adc	r23, r23
 a84:	88 1f       	adc	r24, r24
 a86:	c2 f7       	brpl	.-16     	; 0xa78 <__addsf3x+0x6a>
 a88:	0e c0       	rjmp	.+28     	; 0xaa6 <__addsf3x+0x98>
 a8a:	ba 0f       	add	r27, r26
 a8c:	62 1f       	adc	r22, r18
 a8e:	73 1f       	adc	r23, r19
 a90:	84 1f       	adc	r24, r20
 a92:	48 f4       	brcc	.+18     	; 0xaa6 <__addsf3x+0x98>
 a94:	87 95       	ror	r24
 a96:	77 95       	ror	r23
 a98:	67 95       	ror	r22
 a9a:	b7 95       	ror	r27
 a9c:	f7 95       	ror	r31
 a9e:	9e 3f       	cpi	r25, 0xFE	; 254
 aa0:	08 f0       	brcs	.+2      	; 0xaa4 <__addsf3x+0x96>
 aa2:	b3 cf       	rjmp	.-154    	; 0xa0a <__addsf3+0x1e>
 aa4:	93 95       	inc	r25
 aa6:	88 0f       	add	r24, r24
 aa8:	08 f0       	brcs	.+2      	; 0xaac <__addsf3x+0x9e>
 aaa:	99 27       	eor	r25, r25
 aac:	ee 0f       	add	r30, r30
 aae:	97 95       	ror	r25
 ab0:	87 95       	ror	r24
 ab2:	08 95       	ret

00000ab4 <__cmpsf2>:
 ab4:	6c d0       	rcall	.+216    	; 0xb8e <__fp_cmp>
 ab6:	08 f4       	brcc	.+2      	; 0xaba <__cmpsf2+0x6>
 ab8:	81 e0       	ldi	r24, 0x01	; 1
 aba:	08 95       	ret

00000abc <__fixunssfsi>:
 abc:	bc d0       	rcall	.+376    	; 0xc36 <__fp_splitA>
 abe:	88 f0       	brcs	.+34     	; 0xae2 <__fixunssfsi+0x26>
 ac0:	9f 57       	subi	r25, 0x7F	; 127
 ac2:	90 f0       	brcs	.+36     	; 0xae8 <__fixunssfsi+0x2c>
 ac4:	b9 2f       	mov	r27, r25
 ac6:	99 27       	eor	r25, r25
 ac8:	b7 51       	subi	r27, 0x17	; 23
 aca:	a0 f0       	brcs	.+40     	; 0xaf4 <__fixunssfsi+0x38>
 acc:	d1 f0       	breq	.+52     	; 0xb02 <__fixunssfsi+0x46>
 ace:	66 0f       	add	r22, r22
 ad0:	77 1f       	adc	r23, r23
 ad2:	88 1f       	adc	r24, r24
 ad4:	99 1f       	adc	r25, r25
 ad6:	1a f0       	brmi	.+6      	; 0xade <__fixunssfsi+0x22>
 ad8:	ba 95       	dec	r27
 ada:	c9 f7       	brne	.-14     	; 0xace <__fixunssfsi+0x12>
 adc:	12 c0       	rjmp	.+36     	; 0xb02 <__fixunssfsi+0x46>
 ade:	b1 30       	cpi	r27, 0x01	; 1
 ae0:	81 f0       	breq	.+32     	; 0xb02 <__fixunssfsi+0x46>
 ae2:	c3 d0       	rcall	.+390    	; 0xc6a <__fp_zero>
 ae4:	b1 e0       	ldi	r27, 0x01	; 1
 ae6:	08 95       	ret
 ae8:	c0 c0       	rjmp	.+384    	; 0xc6a <__fp_zero>
 aea:	67 2f       	mov	r22, r23
 aec:	78 2f       	mov	r23, r24
 aee:	88 27       	eor	r24, r24
 af0:	b8 5f       	subi	r27, 0xF8	; 248
 af2:	39 f0       	breq	.+14     	; 0xb02 <__fixunssfsi+0x46>
 af4:	b9 3f       	cpi	r27, 0xF9	; 249
 af6:	cc f3       	brlt	.-14     	; 0xaea <__fixunssfsi+0x2e>
 af8:	86 95       	lsr	r24
 afa:	77 95       	ror	r23
 afc:	67 95       	ror	r22
 afe:	b3 95       	inc	r27
 b00:	d9 f7       	brne	.-10     	; 0xaf8 <__fixunssfsi+0x3c>
 b02:	3e f4       	brtc	.+14     	; 0xb12 <__fixunssfsi+0x56>
 b04:	90 95       	com	r25
 b06:	80 95       	com	r24
 b08:	70 95       	com	r23
 b0a:	61 95       	neg	r22
 b0c:	7f 4f       	sbci	r23, 0xFF	; 255
 b0e:	8f 4f       	sbci	r24, 0xFF	; 255
 b10:	9f 4f       	sbci	r25, 0xFF	; 255
 b12:	08 95       	ret

00000b14 <__floatunsisf>:
 b14:	e8 94       	clt
 b16:	09 c0       	rjmp	.+18     	; 0xb2a <__floatsisf+0x12>

00000b18 <__floatsisf>:
 b18:	97 fb       	bst	r25, 7
 b1a:	3e f4       	brtc	.+14     	; 0xb2a <__floatsisf+0x12>
 b1c:	90 95       	com	r25
 b1e:	80 95       	com	r24
 b20:	70 95       	com	r23
 b22:	61 95       	neg	r22
 b24:	7f 4f       	sbci	r23, 0xFF	; 255
 b26:	8f 4f       	sbci	r24, 0xFF	; 255
 b28:	9f 4f       	sbci	r25, 0xFF	; 255
 b2a:	99 23       	and	r25, r25
 b2c:	a9 f0       	breq	.+42     	; 0xb58 <__floatsisf+0x40>
 b2e:	f9 2f       	mov	r31, r25
 b30:	96 e9       	ldi	r25, 0x96	; 150
 b32:	bb 27       	eor	r27, r27
 b34:	93 95       	inc	r25
 b36:	f6 95       	lsr	r31
 b38:	87 95       	ror	r24
 b3a:	77 95       	ror	r23
 b3c:	67 95       	ror	r22
 b3e:	b7 95       	ror	r27
 b40:	f1 11       	cpse	r31, r1
 b42:	f8 cf       	rjmp	.-16     	; 0xb34 <__floatsisf+0x1c>
 b44:	fa f4       	brpl	.+62     	; 0xb84 <__floatsisf+0x6c>
 b46:	bb 0f       	add	r27, r27
 b48:	11 f4       	brne	.+4      	; 0xb4e <__floatsisf+0x36>
 b4a:	60 ff       	sbrs	r22, 0
 b4c:	1b c0       	rjmp	.+54     	; 0xb84 <__floatsisf+0x6c>
 b4e:	6f 5f       	subi	r22, 0xFF	; 255
 b50:	7f 4f       	sbci	r23, 0xFF	; 255
 b52:	8f 4f       	sbci	r24, 0xFF	; 255
 b54:	9f 4f       	sbci	r25, 0xFF	; 255
 b56:	16 c0       	rjmp	.+44     	; 0xb84 <__floatsisf+0x6c>
 b58:	88 23       	and	r24, r24
 b5a:	11 f0       	breq	.+4      	; 0xb60 <__floatsisf+0x48>
 b5c:	96 e9       	ldi	r25, 0x96	; 150
 b5e:	11 c0       	rjmp	.+34     	; 0xb82 <__floatsisf+0x6a>
 b60:	77 23       	and	r23, r23
 b62:	21 f0       	breq	.+8      	; 0xb6c <__floatsisf+0x54>
 b64:	9e e8       	ldi	r25, 0x8E	; 142
 b66:	87 2f       	mov	r24, r23
 b68:	76 2f       	mov	r23, r22
 b6a:	05 c0       	rjmp	.+10     	; 0xb76 <__floatsisf+0x5e>
 b6c:	66 23       	and	r22, r22
 b6e:	71 f0       	breq	.+28     	; 0xb8c <__floatsisf+0x74>
 b70:	96 e8       	ldi	r25, 0x86	; 134
 b72:	86 2f       	mov	r24, r22
 b74:	70 e0       	ldi	r23, 0x00	; 0
 b76:	60 e0       	ldi	r22, 0x00	; 0
 b78:	2a f0       	brmi	.+10     	; 0xb84 <__floatsisf+0x6c>
 b7a:	9a 95       	dec	r25
 b7c:	66 0f       	add	r22, r22
 b7e:	77 1f       	adc	r23, r23
 b80:	88 1f       	adc	r24, r24
 b82:	da f7       	brpl	.-10     	; 0xb7a <__floatsisf+0x62>
 b84:	88 0f       	add	r24, r24
 b86:	96 95       	lsr	r25
 b88:	87 95       	ror	r24
 b8a:	97 f9       	bld	r25, 7
 b8c:	08 95       	ret

00000b8e <__fp_cmp>:
 b8e:	99 0f       	add	r25, r25
 b90:	00 08       	sbc	r0, r0
 b92:	55 0f       	add	r21, r21
 b94:	aa 0b       	sbc	r26, r26
 b96:	e0 e8       	ldi	r30, 0x80	; 128
 b98:	fe ef       	ldi	r31, 0xFE	; 254
 b9a:	16 16       	cp	r1, r22
 b9c:	17 06       	cpc	r1, r23
 b9e:	e8 07       	cpc	r30, r24
 ba0:	f9 07       	cpc	r31, r25
 ba2:	c0 f0       	brcs	.+48     	; 0xbd4 <__fp_cmp+0x46>
 ba4:	12 16       	cp	r1, r18
 ba6:	13 06       	cpc	r1, r19
 ba8:	e4 07       	cpc	r30, r20
 baa:	f5 07       	cpc	r31, r21
 bac:	98 f0       	brcs	.+38     	; 0xbd4 <__fp_cmp+0x46>
 bae:	62 1b       	sub	r22, r18
 bb0:	73 0b       	sbc	r23, r19
 bb2:	84 0b       	sbc	r24, r20
 bb4:	95 0b       	sbc	r25, r21
 bb6:	39 f4       	brne	.+14     	; 0xbc6 <__fp_cmp+0x38>
 bb8:	0a 26       	eor	r0, r26
 bba:	61 f0       	breq	.+24     	; 0xbd4 <__fp_cmp+0x46>
 bbc:	23 2b       	or	r18, r19
 bbe:	24 2b       	or	r18, r20
 bc0:	25 2b       	or	r18, r21
 bc2:	21 f4       	brne	.+8      	; 0xbcc <__fp_cmp+0x3e>
 bc4:	08 95       	ret
 bc6:	0a 26       	eor	r0, r26
 bc8:	09 f4       	brne	.+2      	; 0xbcc <__fp_cmp+0x3e>
 bca:	a1 40       	sbci	r26, 0x01	; 1
 bcc:	a6 95       	lsr	r26
 bce:	8f ef       	ldi	r24, 0xFF	; 255
 bd0:	81 1d       	adc	r24, r1
 bd2:	81 1d       	adc	r24, r1
 bd4:	08 95       	ret

00000bd6 <__fp_inf>:
 bd6:	97 f9       	bld	r25, 7
 bd8:	9f 67       	ori	r25, 0x7F	; 127
 bda:	80 e8       	ldi	r24, 0x80	; 128
 bdc:	70 e0       	ldi	r23, 0x00	; 0
 bde:	60 e0       	ldi	r22, 0x00	; 0
 be0:	08 95       	ret

00000be2 <__fp_nan>:
 be2:	9f ef       	ldi	r25, 0xFF	; 255
 be4:	80 ec       	ldi	r24, 0xC0	; 192
 be6:	08 95       	ret

00000be8 <__fp_pscA>:
 be8:	00 24       	eor	r0, r0
 bea:	0a 94       	dec	r0
 bec:	16 16       	cp	r1, r22
 bee:	17 06       	cpc	r1, r23
 bf0:	18 06       	cpc	r1, r24
 bf2:	09 06       	cpc	r0, r25
 bf4:	08 95       	ret

00000bf6 <__fp_pscB>:
 bf6:	00 24       	eor	r0, r0
 bf8:	0a 94       	dec	r0
 bfa:	12 16       	cp	r1, r18
 bfc:	13 06       	cpc	r1, r19
 bfe:	14 06       	cpc	r1, r20
 c00:	05 06       	cpc	r0, r21
 c02:	08 95       	ret

00000c04 <__fp_round>:
 c04:	09 2e       	mov	r0, r25
 c06:	03 94       	inc	r0
 c08:	00 0c       	add	r0, r0
 c0a:	11 f4       	brne	.+4      	; 0xc10 <__fp_round+0xc>
 c0c:	88 23       	and	r24, r24
 c0e:	52 f0       	brmi	.+20     	; 0xc24 <__fp_round+0x20>
 c10:	bb 0f       	add	r27, r27
 c12:	40 f4       	brcc	.+16     	; 0xc24 <__fp_round+0x20>
 c14:	bf 2b       	or	r27, r31
 c16:	11 f4       	brne	.+4      	; 0xc1c <__fp_round+0x18>
 c18:	60 ff       	sbrs	r22, 0
 c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__fp_round+0x20>
 c1c:	6f 5f       	subi	r22, 0xFF	; 255
 c1e:	7f 4f       	sbci	r23, 0xFF	; 255
 c20:	8f 4f       	sbci	r24, 0xFF	; 255
 c22:	9f 4f       	sbci	r25, 0xFF	; 255
 c24:	08 95       	ret

00000c26 <__fp_split3>:
 c26:	57 fd       	sbrc	r21, 7
 c28:	90 58       	subi	r25, 0x80	; 128
 c2a:	44 0f       	add	r20, r20
 c2c:	55 1f       	adc	r21, r21
 c2e:	59 f0       	breq	.+22     	; 0xc46 <__fp_splitA+0x10>
 c30:	5f 3f       	cpi	r21, 0xFF	; 255
 c32:	71 f0       	breq	.+28     	; 0xc50 <__fp_splitA+0x1a>
 c34:	47 95       	ror	r20

00000c36 <__fp_splitA>:
 c36:	88 0f       	add	r24, r24
 c38:	97 fb       	bst	r25, 7
 c3a:	99 1f       	adc	r25, r25
 c3c:	61 f0       	breq	.+24     	; 0xc56 <__fp_splitA+0x20>
 c3e:	9f 3f       	cpi	r25, 0xFF	; 255
 c40:	79 f0       	breq	.+30     	; 0xc60 <__fp_splitA+0x2a>
 c42:	87 95       	ror	r24
 c44:	08 95       	ret
 c46:	12 16       	cp	r1, r18
 c48:	13 06       	cpc	r1, r19
 c4a:	14 06       	cpc	r1, r20
 c4c:	55 1f       	adc	r21, r21
 c4e:	f2 cf       	rjmp	.-28     	; 0xc34 <__fp_split3+0xe>
 c50:	46 95       	lsr	r20
 c52:	f1 df       	rcall	.-30     	; 0xc36 <__fp_splitA>
 c54:	08 c0       	rjmp	.+16     	; 0xc66 <__fp_splitA+0x30>
 c56:	16 16       	cp	r1, r22
 c58:	17 06       	cpc	r1, r23
 c5a:	18 06       	cpc	r1, r24
 c5c:	99 1f       	adc	r25, r25
 c5e:	f1 cf       	rjmp	.-30     	; 0xc42 <__fp_splitA+0xc>
 c60:	86 95       	lsr	r24
 c62:	71 05       	cpc	r23, r1
 c64:	61 05       	cpc	r22, r1
 c66:	08 94       	sec
 c68:	08 95       	ret

00000c6a <__fp_zero>:
 c6a:	e8 94       	clt

00000c6c <__fp_szero>:
 c6c:	bb 27       	eor	r27, r27
 c6e:	66 27       	eor	r22, r22
 c70:	77 27       	eor	r23, r23
 c72:	cb 01       	movw	r24, r22
 c74:	97 f9       	bld	r25, 7
 c76:	08 95       	ret

00000c78 <__gesf2>:
 c78:	8a df       	rcall	.-236    	; 0xb8e <__fp_cmp>
 c7a:	08 f4       	brcc	.+2      	; 0xc7e <__gesf2+0x6>
 c7c:	8f ef       	ldi	r24, 0xFF	; 255
 c7e:	08 95       	ret

00000c80 <__udivmodsi4>:
 c80:	a1 e2       	ldi	r26, 0x21	; 33
 c82:	1a 2e       	mov	r1, r26
 c84:	aa 1b       	sub	r26, r26
 c86:	bb 1b       	sub	r27, r27
 c88:	fd 01       	movw	r30, r26
 c8a:	0d c0       	rjmp	.+26     	; 0xca6 <__udivmodsi4_ep>

00000c8c <__udivmodsi4_loop>:
 c8c:	aa 1f       	adc	r26, r26
 c8e:	bb 1f       	adc	r27, r27
 c90:	ee 1f       	adc	r30, r30
 c92:	ff 1f       	adc	r31, r31
 c94:	a2 17       	cp	r26, r18
 c96:	b3 07       	cpc	r27, r19
 c98:	e4 07       	cpc	r30, r20
 c9a:	f5 07       	cpc	r31, r21
 c9c:	20 f0       	brcs	.+8      	; 0xca6 <__udivmodsi4_ep>
 c9e:	a2 1b       	sub	r26, r18
 ca0:	b3 0b       	sbc	r27, r19
 ca2:	e4 0b       	sbc	r30, r20
 ca4:	f5 0b       	sbc	r31, r21

00000ca6 <__udivmodsi4_ep>:
 ca6:	66 1f       	adc	r22, r22
 ca8:	77 1f       	adc	r23, r23
 caa:	88 1f       	adc	r24, r24
 cac:	99 1f       	adc	r25, r25
 cae:	1a 94       	dec	r1
 cb0:	69 f7       	brne	.-38     	; 0xc8c <__udivmodsi4_loop>
 cb2:	60 95       	com	r22
 cb4:	70 95       	com	r23
 cb6:	80 95       	com	r24
 cb8:	90 95       	com	r25
 cba:	9b 01       	movw	r18, r22
 cbc:	ac 01       	movw	r20, r24
 cbe:	bd 01       	movw	r22, r26
 cc0:	cf 01       	movw	r24, r30
 cc2:	08 95       	ret

00000cc4 <do_rand>:
 cc4:	8f 92       	push	r8
 cc6:	9f 92       	push	r9
 cc8:	af 92       	push	r10
 cca:	bf 92       	push	r11
 ccc:	cf 92       	push	r12
 cce:	df 92       	push	r13
 cd0:	ef 92       	push	r14
 cd2:	ff 92       	push	r15
 cd4:	cf 93       	push	r28
 cd6:	df 93       	push	r29
 cd8:	ec 01       	movw	r28, r24
 cda:	68 81       	ld	r22, Y
 cdc:	79 81       	ldd	r23, Y+1	; 0x01
 cde:	8a 81       	ldd	r24, Y+2	; 0x02
 ce0:	9b 81       	ldd	r25, Y+3	; 0x03
 ce2:	61 15       	cp	r22, r1
 ce4:	71 05       	cpc	r23, r1
 ce6:	81 05       	cpc	r24, r1
 ce8:	91 05       	cpc	r25, r1
 cea:	21 f4       	brne	.+8      	; 0xcf4 <do_rand+0x30>
 cec:	64 e2       	ldi	r22, 0x24	; 36
 cee:	79 ed       	ldi	r23, 0xD9	; 217
 cf0:	8b e5       	ldi	r24, 0x5B	; 91
 cf2:	97 e0       	ldi	r25, 0x07	; 7
 cf4:	2d e1       	ldi	r18, 0x1D	; 29
 cf6:	33 ef       	ldi	r19, 0xF3	; 243
 cf8:	41 e0       	ldi	r20, 0x01	; 1
 cfa:	50 e0       	ldi	r21, 0x00	; 0
 cfc:	97 d0       	rcall	.+302    	; 0xe2c <__divmodsi4>
 cfe:	49 01       	movw	r8, r18
 d00:	5a 01       	movw	r10, r20
 d02:	9b 01       	movw	r18, r22
 d04:	ac 01       	movw	r20, r24
 d06:	a7 ea       	ldi	r26, 0xA7	; 167
 d08:	b1 e4       	ldi	r27, 0x41	; 65
 d0a:	ac d0       	rcall	.+344    	; 0xe64 <__muluhisi3>
 d0c:	6b 01       	movw	r12, r22
 d0e:	7c 01       	movw	r14, r24
 d10:	ac ee       	ldi	r26, 0xEC	; 236
 d12:	b4 ef       	ldi	r27, 0xF4	; 244
 d14:	a5 01       	movw	r20, r10
 d16:	94 01       	movw	r18, r8
 d18:	b1 d0       	rcall	.+354    	; 0xe7c <__mulohisi3>
 d1a:	dc 01       	movw	r26, r24
 d1c:	cb 01       	movw	r24, r22
 d1e:	8c 0d       	add	r24, r12
 d20:	9d 1d       	adc	r25, r13
 d22:	ae 1d       	adc	r26, r14
 d24:	bf 1d       	adc	r27, r15
 d26:	b7 ff       	sbrs	r27, 7
 d28:	03 c0       	rjmp	.+6      	; 0xd30 <do_rand+0x6c>
 d2a:	01 97       	sbiw	r24, 0x01	; 1
 d2c:	a1 09       	sbc	r26, r1
 d2e:	b0 48       	sbci	r27, 0x80	; 128
 d30:	88 83       	st	Y, r24
 d32:	99 83       	std	Y+1, r25	; 0x01
 d34:	aa 83       	std	Y+2, r26	; 0x02
 d36:	bb 83       	std	Y+3, r27	; 0x03
 d38:	9f 77       	andi	r25, 0x7F	; 127
 d3a:	df 91       	pop	r29
 d3c:	cf 91       	pop	r28
 d3e:	ff 90       	pop	r15
 d40:	ef 90       	pop	r14
 d42:	df 90       	pop	r13
 d44:	cf 90       	pop	r12
 d46:	bf 90       	pop	r11
 d48:	af 90       	pop	r10
 d4a:	9f 90       	pop	r9
 d4c:	8f 90       	pop	r8
 d4e:	08 95       	ret

00000d50 <rand_r>:
 d50:	b9 cf       	rjmp	.-142    	; 0xcc4 <do_rand>

00000d52 <rand>:
 d52:	80 e0       	ldi	r24, 0x00	; 0
 d54:	91 e0       	ldi	r25, 0x01	; 1
 d56:	b6 cf       	rjmp	.-148    	; 0xcc4 <do_rand>

00000d58 <srand>:
 d58:	a0 e0       	ldi	r26, 0x00	; 0
 d5a:	b0 e0       	ldi	r27, 0x00	; 0
 d5c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 d60:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 d64:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 d68:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 d6c:	08 95       	ret

00000d6e <strcat>:
 d6e:	fb 01       	movw	r30, r22
 d70:	dc 01       	movw	r26, r24
 d72:	0d 90       	ld	r0, X+
 d74:	00 20       	and	r0, r0
 d76:	e9 f7       	brne	.-6      	; 0xd72 <strcat+0x4>
 d78:	11 97       	sbiw	r26, 0x01	; 1
 d7a:	01 90       	ld	r0, Z+
 d7c:	0d 92       	st	X+, r0
 d7e:	00 20       	and	r0, r0
 d80:	e1 f7       	brne	.-8      	; 0xd7a <strcat+0xc>
 d82:	08 95       	ret

00000d84 <strcpy>:
 d84:	fb 01       	movw	r30, r22
 d86:	dc 01       	movw	r26, r24
 d88:	01 90       	ld	r0, Z+
 d8a:	0d 92       	st	X+, r0
 d8c:	00 20       	and	r0, r0
 d8e:	e1 f7       	brne	.-8      	; 0xd88 <strcpy+0x4>
 d90:	08 95       	ret

00000d92 <__itoa_ncheck>:
 d92:	bb 27       	eor	r27, r27
 d94:	4a 30       	cpi	r20, 0x0A	; 10
 d96:	31 f4       	brne	.+12     	; 0xda4 <__itoa_ncheck+0x12>
 d98:	99 23       	and	r25, r25
 d9a:	22 f4       	brpl	.+8      	; 0xda4 <__itoa_ncheck+0x12>
 d9c:	bd e2       	ldi	r27, 0x2D	; 45
 d9e:	90 95       	com	r25
 da0:	81 95       	neg	r24
 da2:	9f 4f       	sbci	r25, 0xFF	; 255
 da4:	01 c0       	rjmp	.+2      	; 0xda8 <__utoa_common>

00000da6 <__utoa_ncheck>:
 da6:	bb 27       	eor	r27, r27

00000da8 <__utoa_common>:
 da8:	fb 01       	movw	r30, r22
 daa:	55 27       	eor	r21, r21
 dac:	aa 27       	eor	r26, r26
 dae:	88 0f       	add	r24, r24
 db0:	99 1f       	adc	r25, r25
 db2:	aa 1f       	adc	r26, r26
 db4:	a4 17       	cp	r26, r20
 db6:	10 f0       	brcs	.+4      	; 0xdbc <__utoa_common+0x14>
 db8:	a4 1b       	sub	r26, r20
 dba:	83 95       	inc	r24
 dbc:	50 51       	subi	r21, 0x10	; 16
 dbe:	b9 f7       	brne	.-18     	; 0xdae <__utoa_common+0x6>
 dc0:	a0 5d       	subi	r26, 0xD0	; 208
 dc2:	aa 33       	cpi	r26, 0x3A	; 58
 dc4:	08 f0       	brcs	.+2      	; 0xdc8 <__utoa_common+0x20>
 dc6:	a9 5d       	subi	r26, 0xD9	; 217
 dc8:	a1 93       	st	Z+, r26
 dca:	00 97       	sbiw	r24, 0x00	; 0
 dcc:	79 f7       	brne	.-34     	; 0xdac <__utoa_common+0x4>
 dce:	b1 11       	cpse	r27, r1
 dd0:	b1 93       	st	Z+, r27
 dd2:	11 92       	st	Z+, r1
 dd4:	cb 01       	movw	r24, r22
 dd6:	00 c0       	rjmp	.+0      	; 0xdd8 <strrev>

00000dd8 <strrev>:
 dd8:	dc 01       	movw	r26, r24
 dda:	fc 01       	movw	r30, r24
 ddc:	67 2f       	mov	r22, r23
 dde:	71 91       	ld	r23, Z+
 de0:	77 23       	and	r23, r23
 de2:	e1 f7       	brne	.-8      	; 0xddc <strrev+0x4>
 de4:	32 97       	sbiw	r30, 0x02	; 2
 de6:	04 c0       	rjmp	.+8      	; 0xdf0 <strrev+0x18>
 de8:	7c 91       	ld	r23, X
 dea:	6d 93       	st	X+, r22
 dec:	70 83       	st	Z, r23
 dee:	62 91       	ld	r22, -Z
 df0:	ae 17       	cp	r26, r30
 df2:	bf 07       	cpc	r27, r31
 df4:	c8 f3       	brcs	.-14     	; 0xde8 <strrev+0x10>
 df6:	08 95       	ret

00000df8 <eeprom_read_byte>:
 df8:	f9 99       	sbic	0x1f, 1	; 31
 dfa:	fe cf       	rjmp	.-4      	; 0xdf8 <eeprom_read_byte>
 dfc:	92 bd       	out	0x22, r25	; 34
 dfe:	81 bd       	out	0x21, r24	; 33
 e00:	f8 9a       	sbi	0x1f, 0	; 31
 e02:	99 27       	eor	r25, r25
 e04:	80 b5       	in	r24, 0x20	; 32
 e06:	08 95       	ret

00000e08 <eeprom_update_byte>:
 e08:	26 2f       	mov	r18, r22

00000e0a <eeprom_update_r18>:
 e0a:	f9 99       	sbic	0x1f, 1	; 31
 e0c:	fe cf       	rjmp	.-4      	; 0xe0a <eeprom_update_r18>
 e0e:	92 bd       	out	0x22, r25	; 34
 e10:	81 bd       	out	0x21, r24	; 33
 e12:	f8 9a       	sbi	0x1f, 0	; 31
 e14:	01 97       	sbiw	r24, 0x01	; 1
 e16:	00 b4       	in	r0, 0x20	; 32
 e18:	02 16       	cp	r0, r18
 e1a:	39 f0       	breq	.+14     	; 0xe2a <eeprom_update_r18+0x20>
 e1c:	1f ba       	out	0x1f, r1	; 31
 e1e:	20 bd       	out	0x20, r18	; 32
 e20:	0f b6       	in	r0, 0x3f	; 63
 e22:	f8 94       	cli
 e24:	fa 9a       	sbi	0x1f, 2	; 31
 e26:	f9 9a       	sbi	0x1f, 1	; 31
 e28:	0f be       	out	0x3f, r0	; 63
 e2a:	08 95       	ret

00000e2c <__divmodsi4>:
 e2c:	05 2e       	mov	r0, r21
 e2e:	97 fb       	bst	r25, 7
 e30:	16 f4       	brtc	.+4      	; 0xe36 <__divmodsi4+0xa>
 e32:	00 94       	com	r0
 e34:	0f d0       	rcall	.+30     	; 0xe54 <__negsi2>
 e36:	57 fd       	sbrc	r21, 7
 e38:	05 d0       	rcall	.+10     	; 0xe44 <__divmodsi4_neg2>
 e3a:	22 df       	rcall	.-444    	; 0xc80 <__udivmodsi4>
 e3c:	07 fc       	sbrc	r0, 7
 e3e:	02 d0       	rcall	.+4      	; 0xe44 <__divmodsi4_neg2>
 e40:	46 f4       	brtc	.+16     	; 0xe52 <__divmodsi4_exit>
 e42:	08 c0       	rjmp	.+16     	; 0xe54 <__negsi2>

00000e44 <__divmodsi4_neg2>:
 e44:	50 95       	com	r21
 e46:	40 95       	com	r20
 e48:	30 95       	com	r19
 e4a:	21 95       	neg	r18
 e4c:	3f 4f       	sbci	r19, 0xFF	; 255
 e4e:	4f 4f       	sbci	r20, 0xFF	; 255
 e50:	5f 4f       	sbci	r21, 0xFF	; 255

00000e52 <__divmodsi4_exit>:
 e52:	08 95       	ret

00000e54 <__negsi2>:
 e54:	90 95       	com	r25
 e56:	80 95       	com	r24
 e58:	70 95       	com	r23
 e5a:	61 95       	neg	r22
 e5c:	7f 4f       	sbci	r23, 0xFF	; 255
 e5e:	8f 4f       	sbci	r24, 0xFF	; 255
 e60:	9f 4f       	sbci	r25, 0xFF	; 255
 e62:	08 95       	ret

00000e64 <__muluhisi3>:
 e64:	0f d0       	rcall	.+30     	; 0xe84 <__umulhisi3>
 e66:	a5 9f       	mul	r26, r21
 e68:	90 0d       	add	r25, r0
 e6a:	b4 9f       	mul	r27, r20
 e6c:	90 0d       	add	r25, r0
 e6e:	a4 9f       	mul	r26, r20
 e70:	80 0d       	add	r24, r0
 e72:	91 1d       	adc	r25, r1
 e74:	11 24       	eor	r1, r1
 e76:	08 95       	ret

00000e78 <__mulshisi3>:
 e78:	b7 ff       	sbrs	r27, 7
 e7a:	f4 cf       	rjmp	.-24     	; 0xe64 <__muluhisi3>

00000e7c <__mulohisi3>:
 e7c:	f3 df       	rcall	.-26     	; 0xe64 <__muluhisi3>
 e7e:	82 1b       	sub	r24, r18
 e80:	93 0b       	sbc	r25, r19
 e82:	08 95       	ret

00000e84 <__umulhisi3>:
 e84:	a2 9f       	mul	r26, r18
 e86:	b0 01       	movw	r22, r0
 e88:	b3 9f       	mul	r27, r19
 e8a:	c0 01       	movw	r24, r0
 e8c:	a3 9f       	mul	r26, r19
 e8e:	70 0d       	add	r23, r0
 e90:	81 1d       	adc	r24, r1
 e92:	11 24       	eor	r1, r1
 e94:	91 1d       	adc	r25, r1
 e96:	b2 9f       	mul	r27, r18
 e98:	70 0d       	add	r23, r0
 e9a:	81 1d       	adc	r24, r1
 e9c:	11 24       	eor	r1, r1
 e9e:	91 1d       	adc	r25, r1
 ea0:	08 95       	ret

00000ea2 <_exit>:
 ea2:	f8 94       	cli

00000ea4 <__stop_program>:
 ea4:	ff cf       	rjmp	.-2      	; 0xea4 <__stop_program>
